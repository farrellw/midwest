{"version":3,"sources":["registerServiceWorker.ts","lib/Button.tsx","lib/Icon.tsx","lib/Card.tsx","lib/SchoolInformation.tsx","utils/Url.tsx","lib/SchoolInformationSlider.tsx","models/Data.ts","models/GeneralExpenseConstants.ts","lib/expenses/Chart.tsx","lib/expenses/Table.tsx","lib/expenses/ViewOptions.tsx","lib/expenses/GeneralExpense.tsx","lib/Body.tsx","lib/Search.tsx","lib/Header.tsx","App.tsx","Router.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Button","className","type","title","children","onClick","Icon","CardHeader","CardContent","Card","onClose","SchoolInformation","school","name","address","phone","principal","projectedEnrollment","toQueryString","ids","Array","from","values","map","id","join","SchoolInformationSlider","schools","useState","showSearch","setShowSearch","history","useHistory","onSchoolClose","schoolId","schoolIds","s","filter","id_","length","queryString","Url","push","createGlide","options","Glide","glideOptions","peek","rewind","bound","perView","Math","min","breakpoints","512","768","1024","1224","glide","setGlide","useEffect","mount","startAt","max","index","destroy","data-glide-el","key","averageSchoolFunction","expenses","administrativeSalaries","instructionalSalaries","instructionalSupportSalaries","nonInstructionalSupportSalaries","temp","benefits","transportation","discretionary","total","descriptions","rows","label","colors","HC_exporting","Highcharts","HC_noDataToDisplay","lang","thousandsSep","getValue","val","floor","toString","replace","Chart","caption","series","chart","numberFormatter","number","text","xAxis","categories","n","yAxis","align","labels","overflow","plotOptions","bar","dataLabels","enabled","legend","verticalAlign","layout","x","y","borderWidth","backgroundColor","shadow","credits","tooltip","pointFormat","noData","style","fontWeight","fontSize","color","exporting","buttons","contextButton","highcharts","library","add","faCircle","Table","headers","i","icon","row","j","ViewOptions","toggle","compareWithAverage","onToggleChange","onCompareWithAverageChange","value","checked","onChange","htmlFor","GeneralExpense","viewByOption","setViewByOption","setCompareWthAverage","avgOrTotal","tog","selectedSchools","selectedTypes","selectedAverages","averageExpenses","avgExp","includes","combinedSchoolsAndAverages","concat","data","r","round","buildCaption","tableData","toFixed","description","find","d","Body","Search","selectedIds","selectedOptions","o","option","undefined","isMulti","isOptionDisabled","Header","schoolExpensesDictionary","schoolExpenses","forEach","App","URLSearchParams","useLocation","search","getAll","Router","path","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qg/BAWMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,6CAOvBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,4CC7BlDC,MA7Cf,YAMW,IAAD,IALRC,iBAKQ,MALI,GAKJ,MAJRC,YAIQ,MAJD,UAIC,EAHRC,EAGQ,EAHRA,MACAC,EAEQ,EAFRA,SACAC,EACQ,EADRA,QAEA,OAAQH,GACN,IAAK,QACH,OACE,4BACEA,KAAK,SACLD,UAAS,UAAKA,EAAL,UACTE,MAAOA,EACPE,QAASA,GAERD,GAIP,IAAK,UACH,OACE,4BACEF,KAAK,SACLD,UAAS,UAAKA,EAAL,YACTE,MAAOA,EACPE,QAASA,GAERD,GAGP,IAAK,UACH,OACE,4BACEF,KAAK,SACLD,UAAS,UAAKA,EAAL,YACTE,MAAOA,EACPE,QAASA,GAERD,K,MCnCIE,MAXf,YACE,OAD6B,EAAfJ,MAEZ,IAAK,QACH,OAAO,0BAAMD,UAAU,eACzB,IAAK,MACH,OAAO,0BAAMA,UAAU,aACzB,IAAK,SACH,OAAO,0BAAMA,UAAU,kBCDtB,SAASM,EAAT,GAA0D,IAApCH,EAAmC,EAAnCA,SAAmC,IAAzBH,iBAAyB,MAAb,GAAa,EAC9D,OAAO,uBAAKA,UAAS,UAAKA,IAAcG,GAGnC,SAASI,EAAT,GAA2D,IAApCJ,EAAmC,EAAnCA,SAAmC,IAAzBH,iBAAyB,MAAb,GAAa,EAC/D,OAAO,uBAAKA,UAAS,UAAKA,EAAL,aAA2BG,GAI3C,SAASK,EAAT,GAAiE,IAAjDL,EAAgD,EAAhDA,SAAgD,IAAtCH,iBAAsC,MAA1B,GAA0B,EAAtBS,EAAsB,EAAtBA,QAC/C,OACE,uBAAKT,UAAS,UAAKA,EAAL,UACXS,GACC,gBAAC,EAAD,CAAQR,KAAK,QAAQC,MAAM,QAAQF,UAAU,QAAQI,QAASK,GAC5D,gBAAC,EAAD,CAAMR,KAAK,YAGdE,GCQQO,MAxBf,YAA0D,IAA7BC,EAA4B,EAA5BA,OAAQX,EAAoB,EAApBA,UACnC,OACE,kBAAC,EAAD,CACEA,UAAS,6BAAwBA,IAEjC,kBAACM,EAAD,CAAYN,UAAU,UACpB,4BAAKW,EAAOC,OAEd,kBAACL,EAAD,KACE,8BAAOI,EAAOE,SACd,8BAAOF,EAAOG,OACd,4BACE,yCACA,4BAAKH,EAAOI,YAEd,4BACE,0CACA,4BAAKJ,EAAOK,yBC5Bf,SAASC,EAAcC,GAC5B,OAAOC,MAAMC,KAAKF,EAAIG,UACnBC,KAAI,SAAAC,GAAE,mBAAUA,MAChBC,KAAK,K,mBCyFKC,MAjFf,YAAsD,IAAnBC,EAAkB,EAAlBA,QAAkB,EACfC,oBAAS,GADM,mBAC5CC,EAD4C,KAChCC,EADgC,KAE7CC,EAAUC,cAEhB,SAASC,EAAcC,GACrB,IDFqBf,EAAeK,ECE9BW,GDFehB,ECGnBQ,EAAQJ,KAAI,SAAAa,GAAC,OAAIA,EAAEZ,MDHeA,ECIlCU,EDHGf,EAAIkB,QAAO,SAAAC,GAAG,OAAIA,IAAQd,MCK3BW,EAAUI,QAAU,GACtBT,GAAc,GAEhB,IAAMU,EAAcC,EAAkBN,GACtCJ,EAAQW,KAAR,WAAiBF,IAGnB,SAASG,EAAYC,GACnB,OAAO,IAAIC,IAAM,SAAUD,GAG7B,IAAME,EAA6B,CACjCC,KAAM,GACNC,QAAQ,EACRC,OAAO,EACPC,QAASC,KAAKC,IAAI,EAAGzB,EAAQY,QAC7Bc,YAAa,CACXC,IAAK,CACHJ,QAAS,GAEXK,IAAK,CACHL,QAAS,GAEXM,KAAM,CACJN,QAASC,KAAKC,IAAI,EAAGzB,EAAQY,SAE/BkB,KAAM,CACJP,QAASC,KAAKC,IAAI,EAAGzB,EAAQY,WApCgB,EAwCzBX,mBAASe,EAAYG,IAxCI,mBAwC5CY,EAxC4C,KAwCrCC,EAxCqC,KA4DnD,OAlBAC,qBAAU,WACRF,EAAMG,UACL,CAACH,IAEJE,qBAAU,WACR,IAAME,EAAUjC,EAAa,EAAIsB,KAAKY,IAAIL,EAAMM,MAAQ,EAAG,GAC3DL,EACEhB,EAAY,eACPG,EADM,CAETgB,cAIAJ,GACFA,EAAMO,YAEP,CAACpC,EAAYF,IAGd,yBAAK1B,UAAU,6BACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eAAeiE,gBAAc,SAC1C,wBAAIjE,UAAU,iBACX0B,EAAQJ,KAAI,SAAAX,GAAM,OACjB,wBAAIX,UAAU,eAAekE,IAAKvD,EAAOY,IACvC,kBAAC,EAAD,CACEZ,OAAQA,EACRe,QAASA,EACTjB,QAASuB,aClCdmC,EAAwB,SAACxD,GAmBpC,OAlBoB,eACfA,EADe,CAElByD,SAAU,CACRC,uBACE1D,EAAOyD,SAASC,uBAAyB1D,EAAOK,oBAClDsD,sBACE3D,EAAOyD,SAASE,sBAAwB3D,EAAOK,oBACjDuD,6BACE5D,EAAOyD,SAASG,6BAA+B5D,EAAOK,oBACxDwD,gCACE7D,EAAOyD,SAASI,gCAAkC7D,EAAOK,oBAC3DyD,KAAM9D,EAAOyD,SAASK,KAAO9D,EAAOK,oBACpC0D,SAAU/D,EAAOyD,SAASM,SAAW/D,EAAOK,oBAC5C2D,eAAgBhE,EAAOyD,SAASO,eAAiBhE,EAAOK,oBACxD4D,cAAejE,EAAOyD,SAASQ,cAAgBjE,EAAOK,oBACtD6D,MAAOlE,EAAOyD,SAASS,MAAQlE,EAAOK,wB,0DCxD/B8D,EAA+B,CAAC,CACzC,MAAS,0BACT,YAAe,6BAEnB,CACI,MAAS,yBACT,YAAe,6CAGnB,CACI,MAAS,iCACT,YAAe,2BAEnB,CACI,MAAS,qCACT,YAAe,6BAEnB,CACI,MAAS,OACT,YAAe,6CAEnB,CACI,MAAS,WACT,YAAe,6BAEnB,CACI,MAAS,iBACT,YAAe,6CAEnB,CACI,MAAS,gBACT,YAAe,4BAGNC,EAAqB,CAC9B,CAAEC,MAAO,QAASd,IAAK,SACvB,CAAEc,MAAO,0BAA2Bd,IAAK,0BACzC,CAAEc,MAAO,yBAA0Bd,IAAK,yBACxC,CACIc,MAAO,iCACPd,IAAK,gCAET,CACIc,MAAO,qCACPd,IAAK,mCAET,CAAEc,MAAO,OAAQd,IAAK,QACtB,CAAEc,MAAO,WAAYd,IAAK,YAC1B,CAAEc,MAAO,iBAAkBd,IAAK,kBAChC,CAAEc,MAAO,gBAAiBd,IAAK,kBAGtBe,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WCnD9EC,IAAaC,GACbC,IAAmBD,GACnBA,aAAsB,CACpBE,KAAM,CACJC,aAAc,KAEhBL,OAAQA,IAWV,IAAMM,EAAW,SAACC,GAChB,OAAIA,EAAM,IACD,MAAQtC,KAAKuC,MAAMD,EAAM,KAAQ,KAAKE,WAAWC,QAAQ,wBAAyB,KAElF,KAAOH,EAAIE,WAAWC,QAAQ,wBAAyB,MA8EnDC,MA1Ef,YAAmD,IAAlCC,EAAiC,EAAjCA,QAASd,EAAwB,EAAxBA,KAAMe,EAAkB,EAAlBA,OACxBnD,EAA8B,CAClCoD,MAAO,CACL9F,KAAM,MACN+F,gBAAiB,SAACC,GAChB,OAAOV,EAASU,KAGpB/F,MAAO,CACLgG,KAAML,GAERM,MAAO,CACLC,WAAYrB,EAAKzD,KAAI,SAAA+E,GAAC,OAAIA,EAAErB,UAE9BsB,MAAO,CACLnD,IAAK,EACLjD,MAAO,CACLgG,KAAM,UACNK,MAAO,QAETC,OAAQ,CACNC,SAAU,YAGdC,YAAa,CACXC,IAAK,CACHC,WAAY,CACVC,SAAS,KAIfC,OAAQ,CACNP,MAAO,QACPQ,cAAe,MACfC,OAAQ,WACRC,EAAG,EACHC,EAAG,IACHC,YAAa,EACbC,gBACGjC,iBAA0B2B,QACzB3B,iBAA0B2B,OAAOM,iBACnC,UACFC,QAAQ,EACRR,SAAS,GAEXS,QAAS,CACPT,SAAS,GAEXU,QAAS,CACPC,YAAa,2BAEfnC,KAAM,CACJoC,OAAQ,wDAEV3B,SACA2B,OAAQ,CACNC,MAAO,CACLC,WAAY,OACZC,SAAU,OACVC,MAAO,YAGXC,UAAW,CACTC,QAAS,CACPC,cAAe,CACb9B,KAAM,cAMd,OAAO,gBAAC,IAAD,CAAiB+B,WAAY9C,EAAYxC,QAASA,K,gCC1F3DuF,IAAQC,IAAIC,KA+CGC,MAvCf,YAAoD,IAAnCC,EAAkC,EAAlCA,QAASvD,EAAyB,EAAzBA,KAAMc,EAAmB,EAAnBA,QAC9B,OACE,uBAAK7F,UAAU,gBACb,6BACE,+BAAU6F,GACV,6BACE,0BACGyC,EAAQhH,KAAI,SAAC+E,EAAGkC,GACf,OAAS,IAANA,EACM,sBAAIrE,IAAKqE,GAAG,gBAAC,IAAD,CAAiBC,KAAK,SAASX,MAAO5C,EAAOsD,EAAI,KAAM,2BAAMlC,IAEzE,sBAAInC,IAAKqE,GAAG,2BAAMlC,SAKjC,6BACGtB,EAAKzD,KAAI,SAACmH,EAAgBF,GACzB,IAAMvI,EAA0B,UAAdyI,EAAIzD,MAAoB,QAAU,GACpD,OACE,sBACEd,IAAKqE,EACLhH,GAAIkH,EAAIzD,MACRhF,UAAWA,GAEX,0BAAKyI,EAAIzD,OAERyD,EAAIpH,OAAOC,KAAI,SAAC+E,EAAGqC,GAClB,OAAO,sBAAIxE,IAAKwE,GAAIrC,c,sBCKvBsC,MA7Cf,YAKY,IAJVC,EAIS,EAJTA,OACAC,EAGS,EAHTA,mBACAC,EAES,EAFTA,eACAC,EACS,EADTA,2BAEA,OACE,uBAAK/I,UAAU,kBACb,uBAAKA,UAAU,iBACb,wCACE,yBACEuB,GAAG,SACHtB,KAAK,QACL+I,MAAM,QACNC,QAAoB,UAAXL,EACTM,SAAUJ,IAEZ,yBAAOK,QAAQ,UAAf,SAGA,yBACElJ,KAAK,QACL+I,MAAM,cACNzH,GAAG,SACH0H,QAAoB,gBAAXL,EACTM,SAAUJ,IAEZ,yBAAOK,QAAQ,UAAf,gBAIJ,uBAAKnJ,UAAU,oBACb,6BACE,yBACEC,KAAK,WACLgJ,QAASJ,EACTK,SAAUH,IAJd,8BClBRb,IAAQC,IAAIC,KAsJGgB,MAhJf,YAA8C,IAApB1H,EAAmB,EAAnBA,QAAmB,EACHC,mBAAuB,SADpB,mBACpC0H,EADoC,KACtBC,EADsB,OAEQ3H,oBAAS,GAFjB,mBAEpCkH,EAFoC,KAEhBU,EAFgB,KAgBrCC,EAAa,SAACC,GAClB,OAAO,SAAC9I,GACN,MAAY,UAAR8I,EACKtF,EAAsBxD,GAEtBA,IAKP+I,EAA6BhI,EAAQJ,KAAI,SAAAX,GAAM,OACnD6I,EAAWH,EAAXG,CAAyB7I,MAGrBgJ,EAAgBD,EAAgBpI,KAAI,SAAAa,GAAC,OAAIA,EAAElC,QAE3C2J,EAAmBC,EACtBzH,QAAO,SAAA0H,GACN,OAAOjB,GAAsBc,EAAcI,SAASD,EAAO7J,SAE5DqB,KAAI,SAAAX,GAAM,OAAI6I,EAAWH,EAAXG,CAAyB7I,MAEpCqJ,EAA6BN,EAAgBO,OAAOL,GAEpDrE,EAAW,SAACC,GAChB,MAAO,KAAOA,EAAIE,WAAWC,QAAQ,wBAAyB,MAG1D2C,EAAU,CAAC,YAAY2B,OAC3BD,EAA2B1I,KAAI,SAAA+E,GAAC,OAAIA,EAAEzF,SAIlCkF,EAA6BkE,EAA2B1I,KAAI,SAACa,EAAGoG,GACpE,MAAO,CACLtI,KAAM,MACNW,KAAMuB,EAAEvB,KACRsJ,KAAMnF,EACH3C,QAAO,SAAA+H,GACN,MAAmB,UAAZA,EAAEnF,SAEV1D,KAAI,SAAA6I,GACH,OAAOjH,KAAKkH,MAA0B,IAApBjI,EAAEiC,SAAS+F,EAAEjG,MAAc,OAEjD2D,MAAO5C,EAAOsD,OAYZ1C,EARe,SAACwD,GACpB,MAAqB,UAAjBA,EACI,6BAEA,6CAIMgB,CAAahB,GAEvBiB,EAAyBvF,EAAKzD,KAClC,SAACmH,GACC,OAAO,eACFA,EADL,CAEEpH,OAAQ2I,EAA2B1I,KAAI,SAAC+E,GACtC,OACSd,EADY,UAAjB8D,EACchD,EAAEjC,SAASqE,EAAIvE,KAAKwB,WAEpBW,EAAEjC,SAASqE,EAAIvE,KAAKqG,QAAQ,YAOtD,OACE,2BAASvK,UAAU,mBACjB,uBAAKA,UAAU,SACb,uBAAKA,UAAU,YACb,sBAAIA,UAAU,sBAAd,OACA,uBAAKA,UAAU,eACb,0BACG8F,EAAOxE,KAAI,SAAC+E,EAAGqC,GACd,OACE,sBAAIxE,IAAKwE,EAAG1I,UAAU,oBACpB,gBAAC,IAAD,CAAiBwI,KAAK,SAASX,MAAO5C,EAAOyD,KAC7C,4BAAOrC,EAAEzF,YAMnB,uBAAKZ,UAAU,iBACZ+E,EACE3C,QAAO,SAAA+H,GAAC,MAAgB,UAAZA,EAAEnF,SACd1D,KAAI,SAAC+E,EAAGqC,GACP,IAAM8B,EAAc1F,EAAa2F,MAAK,SAAAC,GAAC,OAAIA,EAAE1F,QAAUqB,EAAErB,SAEzD,OACE,uBAAKhF,UAAU,iCAAiCkE,IAAKwE,GACnD,sBAAI1I,UAAU,+BAA+BqG,EAAErB,MAA/C,KACA,yBAAIwF,EAAcA,EAAYA,YAAc,UAMxD,uBAAKxK,UAAU,wBACb,gBAAC,EAAD,CACE+I,2BA/G6B,WACrCQ,GAAsBV,IA+GdC,eAxHuB,WAE7BQ,EADmB,UAAjBD,EACc,cAEA,UAqHVT,OAAQS,EACRR,mBAAoBA,IAEtB,gBAAC,EAAD,CACE9D,KAAMA,EAAK3C,QAAO,SAAA6E,GAChB,MAAmB,UAAZA,EAAEjC,SAEXc,OAAQA,EACRD,QAASA,MAIf,uBAAK7F,UAAU,SACb,gBAAC,EAAD,CAAOsI,QAASA,EAASzC,QAASA,EAASd,KAAMuF,OCpJ1CK,MAdf,YAAmC,IAAnBjJ,EAAkB,EAAlBA,QAEd,OACE,wBAAM1B,UAAU,QACd,gBAAC,EAAD,CAAyB0B,QAASA,IACjCA,EAAQY,OAAS,GAChB,gBAAC,EAAD,CACEZ,QAASA,M,sBCoEJkJ,MA3Df,YAA8C,IAA5BlB,EAA2B,EAA3BA,gBACV5H,EAAUC,cAEV8I,EAAcnB,EAAgBpI,KAAI,SAAAa,GACtC,MAAO,CACL6G,MAAO7G,EAAEZ,GACTyD,MAAO7C,EAAEvB,SAaP+B,EADkCjB,EAAQU,QAJhD,SAA4BzB,GAC1B,OAAQkK,EAAYJ,MAAK,SAAAxI,GAAQ,OAAIA,IAAatB,EAAOY,SAIXD,KAAI,SAACX,GAAD,MAAsB,CACxEqI,MAAOrI,EAAOY,GACdyD,MAAOrE,EAAOC,SAiBhB,OACE,2BAASZ,UAAU,UACjB,gBAAC,EAAD,KACE,gBAACO,EAAD,KACE,sBAAIP,UAAU,iBAAd,kCACiC,4CAEjC,gBAAC,IAAD,CACE2C,QAASA,EACTuG,SAtBV,SAAsB4B,GACpB,GAAIA,EAAiB,CACnB,IAGMvI,EAAcC,EAHAsI,EACjB1I,QAAO,SAAC2I,GAAD,OApCEC,EAoCuBD,EAnChCtM,QAAQuM,SAAyCC,IAA7BD,EAAmBhC,MADhD,IAAkBgC,KAqCT1J,KAAI,SAACyJ,GAAD,OAAgBA,EAAE/B,UAGzBlH,EAAQW,KAAR,WAAiBF,SAEjBT,EAAQW,KAAK,KAcPyI,SAAS,EACTC,iBAvCS,WACjB,OAAON,EAAYvI,QAAU,GAuCrB0G,MAAO6B,Q,MCvDJO,MAXf,YAAqC,IAAnB1J,EAAkB,EAAlBA,QAChB,OACE,gCACE,0BAAQ1B,UAAU,eAChB,0CAED,gBAAC,EAAD,CAAQ0J,gBAAiBhI,M,MCAhC,IAAM2J,EAA2B,GACjCC,EAAeC,SAAQ,SAAA5K,GACrB0K,EAAyB1K,EAAOY,IAAMZ,KAkBzB6K,MAff,WACE,IAEM9B,EAXC,IAAI+B,gBAAgBC,cAAcC,QAULC,OAAO,MACItK,KAC7C,SAAAC,GAAE,OAAI8J,EAAyB9J,MAGjC,OACE,gCACE,gBAAC,EAAD,CAAQG,QAASgI,IACjB,gBAAC,EAAD,CAAMhI,QAASgI,M,QCbNmC,MAVf,WACE,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,KAAK,KACV,gBAAC,EAAD,SCFRC,SAAgB,gBAAC,EAAD,MAAYC,SAASC,eAAe,SlBerC,WACb,GAA6C,kBAAmBjN,UAAW,CAMzE,GAJkB,IAAIkN,IACpBC,IACAzN,OAAOC,SAAS+G,YAEJ0G,SAAW1N,OAAOC,SAASyN,OAIvC,OAGF1N,OAAO2N,iBAAiB,QAAQ,WAC9B,IAAMtN,EAAK,UAAMoN,IAAN,sBAEP3N,IAmDV,SAAiCO,GAE/BuN,MAAMvN,GACHI,MAAK,SAAAoN,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASjE,QAAQmE,IAAI,gBAAiBC,QAAQ,cAG9C1N,UAAUC,cAAc0N,MAAMxN,MAAK,SAAAC,GACjCA,EAAawN,aAAazN,MAAK,WAC7BT,OAAOC,SAASkO,eAKpB/N,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAvEAkN,CAAwB/N,GAIxBC,UAAUC,cAAc0N,MAAMxN,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OkB7CxBgO,K","file":"static/js/main.4e7e058c.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./Button.scss\";\n\ntype Type = \"image\" | \"primary\" | \"default\";\ntype Props = {\n  className?: string;\n  type?: Type;\n  title?: string;\n  children: JSX.Element | (JSX.Element | string)[] | string;\n  onClick?: () => void;\n};\nfunction Button({\n  className = \"\",\n  type = \"default\",\n  title,\n  children,\n  onClick\n}: Props) {\n  switch (type) {\n    case \"image\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} image`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n\n    case \"primary\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} primary`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n    case \"default\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} default`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport \"./Icon.scss\";\n\ntype Props = { type: \"close\" | \"add\" | \"delete\" };\nfunction Icon({ type }: Props) {\n  switch (type) {\n    case \"close\":\n      return <span className=\"icon close\"></span>;\n    case \"add\":\n      return <span className=\"icon add\"></span>;\n    case \"delete\":\n      return <span className=\"icon delete\"></span>;\n  }\n}\n\nexport default Icon;\n","import * as React from \"react\";\nimport \"./Card.scss\";\nimport Button from \"./Button\";\nimport Icon from \"./Icon\";\n\ntype Props = {\n  className?: string;\n  children: JSX.Element | JSX.Element[];\n};\n\nexport function CardHeader({ children, className = \"\" }: Props) {\n  return <div className={`${className}`}>{children}</div>;\n}\n\nexport function CardContent({ children, className = \"\" }: Props) {\n  return <div className={`${className} content`}>{children}</div>;\n}\n\ntype CardProps = Props & { onClose?: () => void };\nexport function Card({ children, className = \"\", onClose }: CardProps) {\n  return (\n    <div className={`${className} card`}>\n      {onClose && (\n        <Button type=\"image\" title=\"Close\" className=\"close\" onClick={onClose}>\n          <Icon type=\"delete\" />\n        </Button>\n      )}\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./SchoolInformation.scss\";\nimport { ISchool } from \"src/models/Data\";\nimport { Card, CardHeader, CardContent } from \"./Card\";\n\ntype Props = {\n  school: ISchool;\n  schools: ISchool[];\n  onClose: (id: string) => void;\n  className?: String;\n};\nfunction SchoolInformation({ school, className }: Props) {\n  return (\n    <Card\n      className={`school-information ${className}`}\n    >\n      <CardHeader className=\"header\">\n        <h2>{school.name}</h2>\n      </CardHeader>\n      <CardContent>\n        <span>{school.address}</span>\n        <span>{school.phone}</span>\n        <dl>\n          <dt>Principal</dt>\n          <dd>{school.principal}</dd>\n        </dl>\n        <dl>\n          <dt>Enrollment</dt>\n          <dd>{school.projectedEnrollment}</dd>\n        </dl>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default SchoolInformation;\n","export function toQueryString(ids: string[]): string {\n  return Array.from(ids.values())\n    .map(id => `id=${id}`)\n    .join(\"&\");\n}\n\nexport function addId(ids: string[], id: string): string[] {\n  if (ids.find(id_ => id_ === id)) {\n    return ids;\n  } else {\n    return [id].concat(ids);\n  }\n}\n\nexport function removeId(ids: string[], id: string): string[] {\n  return ids.filter(id_ => id_ !== id);\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./SchoolInformationSlider.scss\";\nimport SchoolInformation from \"./SchoolInformation\";\nimport { ISchool } from \"src/models/Data\";\nimport * as Url from \"../utils/Url\";\nimport { useHistory } from \"react-router-dom\";\nimport Glide from \"@glidejs/glide\";\nimport { GlideOptions } from \"@glidejs/glide/dist/glide.modular.esm\";\n\ntype Props = { schools: ISchool[] };\n\nfunction SchoolInformationSlider({ schools }: Props) {\n  const [showSearch, setShowSearch] = useState(false);\n  const history = useHistory();\n\n  function onSchoolClose(schoolId: string) {\n    const schoolIds = Url.removeId(\n      schools.map(s => s.id),\n      schoolId\n    );\n    if (schoolIds.length <= 0) {\n      setShowSearch(false);\n    }\n    const queryString = Url.toQueryString(schoolIds);\n    history.push(`?${queryString}`);\n  }\n\n  function createGlide(options: GlideOptions): Glide {\n    return new Glide(\".glide\", options);\n  }\n\n  const glideOptions: GlideOptions = {\n    peek: 25,\n    rewind: false,\n    bound: true,\n    perView: Math.min(5, schools.length),\n    breakpoints: {\n      512: {\n        perView: 1\n      },\n      768: {\n        perView: 2\n      },\n      1024: {\n        perView: Math.min(3, schools.length)\n      },\n      1224: {\n        perView: Math.min(4, schools.length)\n      }\n    }\n  };\n  const [glide, setGlide] = useState(createGlide(glideOptions));\n\n  useEffect(() => {\n    glide.mount();\n  }, [glide]);\n\n  useEffect(() => {\n    const startAt = showSearch ? 0 : Math.max(glide.index - 1, 0);\n    setGlide(\n      createGlide({\n        ...glideOptions,\n        startAt\n      })\n    );\n\n    if (glide) {\n      glide.destroy();\n    }\n  }, [showSearch, schools]);\n\n  return (\n    <div className=\"school-information-slider\">\n      <div className=\"glide\">\n        <div className=\"glide__track\" data-glide-el=\"track\">\n          <ul className=\"glide__slides\">\n            {schools.map(school => (\n              <li className=\"glide__slide\" key={school.id}>\n                <SchoolInformation\n                  school={school}\n                  schools={schools}\n                  onClose={onSchoolClose}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SchoolInformationSlider;\n","export interface ISchool {\n  id: string;\n  name: string;\n  type: string;\n  address?: string;\n  principal?: string;\n  phone?: string;\n  projectedEnrollment: number;\n  expenses: IGeneralSchoolExpense;\n}\n\nexport interface IGeneralSchoolExpense {\n  total: number;\n  administrativeSalaries: number;\n  instructionalSalaries: number;\n  instructionalSupportSalaries: number;\n  nonInstructionalSupportSalaries: number;\n  temp: number;\n  benefits: number;\n  transportation: number;\n  discretionary: number;\n}\nexport type SubCategorySchoolExpense = Map<string, number>;\n\nexport type SchoolExpense = IGeneralSchoolExpense | SubCategorySchoolExpense;\n\nexport type SchoolType = \"H\" | \"M\" | \"E\" | \"A\";\n\nexport const SchoolTypeToTypeLabel = {\n  H: \"High\",\n  M: \"Middle\",\n  E: \"Elementary\",\n  A: \"Alternative\"\n};\n\nexport interface ITableData {\n  label: string;\n  key: string;\n}\n\nexport interface ITableRow {\n  label: string;\n  values: string[];\n  selected?: boolean;\n}\n\n\nexport const averageSchoolFunction = (school: ISchool) => {\n  const averagedSchool = {\n    ...school,\n    expenses: {\n      administrativeSalaries:\n        school.expenses.administrativeSalaries / school.projectedEnrollment,\n      instructionalSalaries:\n        school.expenses.instructionalSalaries / school.projectedEnrollment,\n      instructionalSupportSalaries:\n        school.expenses.instructionalSupportSalaries / school.projectedEnrollment,\n      nonInstructionalSupportSalaries:\n        school.expenses.nonInstructionalSupportSalaries / school.projectedEnrollment,\n      temp: school.expenses.temp / school.projectedEnrollment,\n      benefits: school.expenses.benefits / school.projectedEnrollment,\n      transportation: school.expenses.transportation / school.projectedEnrollment,\n      discretionary: school.expenses.discretionary / school.projectedEnrollment,\n      total: school.expenses.total / school.projectedEnrollment\n    },\n  };\n  return averagedSchool;\n}\n\nexport type ViewByOption = \"Total\" | \"Per Student\";","import { ITableData } from './Data';\n\ninterface IDescription {\n    label: string;\n    description: string;\n}\n\nexport const descriptions: IDescription[] = [{\n    \"label\": \"Administrative Salaries\",\n    \"description\": \"dafadsfdseadsfadsfdasfasd\"\n},\n{\n    \"label\": \"Instructional Salaries\",\n    \"description\": \"asdf;ljdsafjdsfjkdsjf;kdjslfkjsda;klfjasd\"\n}\n    ,\n{\n    \"label\": \"Instructional Support Salaries\",\n    \"description\": \"lkjkljiopeasdfdsafasdfs\"\n},\n{\n    \"label\": \"Non Instructional Support Salaries\",\n    \"description\": \"dafadsfdseadsfadsfdasfasd\"\n},\n{\n    \"label\": \"Temp\",\n    \"description\": \"asdf;ljdsafjdsfjkdsjf;kdjslfkjsda;klfjasd\"\n},\n{\n    \"label\": \"Benefits\",\n    \"description\": \"dafadsfdseadsfadsfdasfasd\"\n},\n{\n    \"label\": \"Transportation\",\n    \"description\": \"asdf;ljdsafjdsfjkdsjf;kdjslfkjsda;klfjasd\"\n},\n{\n    \"label\": \"Discretionary\",\n    \"description\": \"lkjkljiopeasdfdsafasdfs\"\n}]\n\nexport const rows: ITableData[] = [\n    { label: \"Total\", key: \"total\" },\n    { label: \"Administrative Salaries\", key: \"administrativeSalaries\" },\n    { label: \"Instructional Salaries\", key: \"instructionalSalaries\" },\n    {\n        label: \"Instructional Support Salaries\",\n        key: \"instructionalSupportSalaries\"\n    },\n    {\n        label: \"Non Instructional Support Salaries\",\n        key: \"nonInstructionalSupportSalaries\"\n    },\n    { label: \"Temp\", key: \"temp\" },\n    { label: \"Benefits\", key: \"benefits\" },\n    { label: \"Transportation\", key: \"transportation\" },\n    { label: \"Discretionary\", key: \"discretionary\" }\n];\n\nexport const colors = ['#92C5DE', '#053061', '#FFD75E', '#FF7E56', '#B2182B', '#ffa600']","import * as React from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport { ITableData } from \"../../models/Data\";\nimport HC_exporting from \"highcharts/modules/exporting\";\nimport HC_noDataToDisplay from \"highcharts/modules/no-data-to-display\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { colors } from \"src/models/GeneralExpenseConstants\";\n\nHC_exporting(Highcharts);\nHC_noDataToDisplay(Highcharts);\nHighcharts.setOptions({\n  lang: {\n    thousandsSep: \",\"\n  },\n  colors: colors\n});\n\ninterface IProps {\n  caption: string;\n  rows: ITableData[];\n  series: Highcharts.SeriesOptionsType[];\n}\n\n\n\nconst getValue = (val: number): string => {\n  if (val > 1000) {\n    return \"$ \" + (Math.floor(val / 1000) + \"k\").toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  } else {\n    return \"$ \" + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n};\n\nfunction Chart({ caption, rows, series }: IProps) {\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"bar\",\n      numberFormatter: (number) => {\n        return getValue(number);\n      }\n    },\n    title: {\n      text: caption\n    },\n    xAxis: {\n      categories: rows.map(n => n.label)\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"Dollars\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true\n        }\n      }\n    },\n    legend: {\n      align: \"right\",\n      verticalAlign: \"top\",\n      layout: \"vertical\",\n      x: 0,\n      y: 100,\n      borderWidth: 1,\n      backgroundColor:\n        (Highcharts.defaultOptions.legend &&\n          Highcharts.defaultOptions.legend.backgroundColor) ||\n        \"#FFFFFF\",\n      shadow: true,\n      enabled: false\n    },\n    credits: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormat: \"Value: {point.y:,.2f} $\"\n    },\n    lang: {\n      noData: \"Chart Unavailable because data has not been released\"\n    },\n    series,\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n        color: \"#303030\"\n      }\n    },\n    exporting: {\n      buttons: {\n        contextButton: {\n          text: \"Actions\"\n        }\n      }\n    }\n  };\n\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default Chart;\n","import * as React from \"react\";\nimport { ITableRow } from \"../../models/Data\";\nimport \"./Table.scss\";\nimport { colors } from \"../../models/GeneralExpenseConstants\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  library\n} from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCircle\n} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faCircle);\n\ninterface IProps {\n  headers: string[];\n  rows: ITableRow[];\n  caption: string;\n}\n\nfunction Table({ headers, rows, caption }: IProps) {\n  return (\n    <div className=\"card expense\">\n      <table>\n        <caption>{caption}</caption>\n        <thead>\n          <tr>\n            {headers.map((n, i) => {\n              if(i !== 0){\n                return <th key={i}><FontAwesomeIcon icon=\"circle\" color={colors[i - 1]} /><div>{n}</div></th>;\n              } else {\n                return <th key={i}><div>{n}</div></th>;\n              }\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row: ITableRow, i: number) => {\n            const className = row.label === \"Total\" ? \"total\" : \"\"\n            return (\n              <tr\n                key={i}\n                id={row.label}\n                className={className}\n              >\n                <td>{row.label}</td>\n\n                {row.values.map((n, j: number) => {\n                  return <td key={j}>{n}</td>;\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import * as React from \"react\";\nimport \"./ViewOptions.scss\";\n\ninterface IProps {\n  toggle: string;\n  compareWithAverage: boolean;\n  onToggleChange: () => void;\n  onCompareWithAverageChange: () => void;\n}\n\nfunction ViewOptions({\n  toggle,\n  compareWithAverage,\n  onToggleChange,\n  onCompareWithAverageChange\n}: IProps) {\n  return (\n    <div className=\"displayOptions\">\n      <div className=\"radio-toolbar\">\n        <span>View by:</span>\n          <input\n            id=\"radio1\"\n            type=\"radio\"\n            value=\"Total\"\n            checked={toggle === \"Total\"}\n            onChange={onToggleChange}\n          />\n          <label htmlFor=\"radio1\">\n          Total\n        </label>\n          <input\n            type=\"radio\"\n            value=\"Per Student\"\n            id=\"radio2\"\n            checked={toggle === \"Per Student\"}\n            onChange={onToggleChange}\n          />\n          <label htmlFor=\"radio2\">\n          Per Student\n        </label>\n      </div>\n      <div className=\"checkbox-toolbar\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={compareWithAverage}\n            onChange={onCompareWithAverageChange}\n          />\n          Compare against Average\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default ViewOptions;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  ITableData,\n  ISchool,\n  ITableRow,\n  ViewByOption,\n  averageSchoolFunction\n} from \"../../models/Data\";\nimport { SeriesBarOptions } from \"highcharts\";\nimport Chart from \"./Chart\";\nimport Table from \"./Table\";\nimport \"./GeneralExpense.scss\";\nimport averageExpenses from \"../../data/SchoolAverages.json\";\nimport ViewOptions from \"./ViewOptions\";\nimport {\n  rows,\n  colors,\n  descriptions\n} from \"../../models/GeneralExpenseConstants\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faCircle);\n\ninterface IProps {\n  schools: ISchool[];\n}\n\nfunction GeneralExpense({ schools }: IProps) {\n  const [viewByOption, setViewByOption] = useState<ViewByOption>(\"Total\");\n  const [compareWithAverage, setCompareWthAverage] = useState(false);\n\n  const handleViewByOptionChange = () => {\n    if (viewByOption === \"Total\") {\n      setViewByOption(\"Per Student\");\n    } else {\n      setViewByOption(\"Total\");\n    }\n  };\n\n  const handleCompareWithAverageChange = () => {\n    setCompareWthAverage(!compareWithAverage);\n  };\n\n  const avgOrTotal = (tog: string): ((school: ISchool) => ISchool) => {\n    return (school: ISchool) => {\n      if (tog !== \"Total\") {\n        return averageSchoolFunction(school);\n      } else {\n        return school;\n      }\n    };\n  };\n\n  const selectedSchools: ISchool[] = schools.map(school =>\n    avgOrTotal(viewByOption)(school)\n  );\n\n  const selectedTypes = selectedSchools.map(s => s.type);\n\n  const selectedAverages = averageExpenses\n    .filter(avgExp => {\n      return compareWithAverage && selectedTypes.includes(avgExp.type);\n    })\n    .map(school => avgOrTotal(viewByOption)(school));\n\n  const combinedSchoolsAndAverages = selectedSchools.concat(selectedAverages);\n\n  const getValue = (val: string): string => {\n    return \"$ \" + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const headers = [\"Category\"].concat(\n    combinedSchoolsAndAverages.map(n => n.name)\n  );\n\n  // Compute chart data to display\n  const series: SeriesBarOptions[] = combinedSchoolsAndAverages.map((s, i) => {\n    return {\n      type: \"bar\",\n      name: s.name,\n      data: rows\n        .filter(r => {\n          return r.label !== \"Total\";\n        })\n        .map(r => {\n          return Math.round(s.expenses[r.key] * 100) / 100;\n        }),\n      color: colors[i]\n    };\n  });\n\n  const buildCaption = (viewByOption: ViewByOption) => {\n    if (viewByOption === \"Total\") {\n      return `Dollars Spent Per Category`;\n    } else {\n      return `Dollars Spent Per Category ( Per Student )`;\n    }\n  };\n\n  const caption = buildCaption(viewByOption);\n\n  const tableData: ITableRow[] = rows.map(\n    (row: ITableData): ITableRow => {\n      return {\n        ...row,\n        values: combinedSchoolsAndAverages.map((n): string => {\n          if (viewByOption === \"Total\") {\n            return getValue(n.expenses[row.key].toString());\n          } else {\n            return getValue(n.expenses[row.key].toFixed(2));\n          }\n        })\n      };\n    }\n  );\n\n  return (\n    <section className=\"general-expense\">\n      <div className=\"panel\">\n        <div className=\"card key\">\n          <h3 className=\"school-list-header\">Key</h3>\n          <div className=\"school-list\">\n            <ul>\n              {series.map((n, j: number) => {\n                return (\n                  <li key={j} className=\"school-list-item\">\n                    <FontAwesomeIcon icon=\"circle\" color={colors[j]} />\n                    <span>{n.name}</span>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n          <div className=\"category-list\">\n            {rows\n              .filter(r => r.label !== \"Total\")\n              .map((n, j: number) => {\n                const description = descriptions.find(d => d.label === n.label);\n\n                return (\n                  <div className=\"category-description-container\" key={j}>\n                    <h4 className=\"category-description-header\">{n.label}:</h4>\n                    <p>{description ? description.description : \"\"}</p>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n        <div className=\"chart-container card\">\n          <ViewOptions\n            onCompareWithAverageChange={handleCompareWithAverageChange}\n            onToggleChange={handleViewByOptionChange}\n            toggle={viewByOption}\n            compareWithAverage={compareWithAverage}\n          />\n          <Chart\n            rows={rows.filter(x => {\n              return x.label !== \"Total\";\n            })}\n            series={series}\n            caption={caption}\n          />\n        </div>\n      </div>\n      <div className=\"panel\">\n        <Table headers={headers} caption={caption} rows={tableData} />\n      </div>\n    </section>\n  );\n}\n\nexport default GeneralExpense;\n","import * as React from \"react\";\nimport { ISchool } from \"../models/Data\";\nimport SchoolInformationSlider from \"./SchoolInformationSlider\";\nimport GeneralExpense from \"./expenses/GeneralExpense\";\n\ntype Props = { schools: ISchool[] };\nfunction Body({ schools }: Props) {\n\n  return (\n    <main className=\"body\">\n      <SchoolInformationSlider schools={schools} />\n      {schools.length > 0 && (\n        <GeneralExpense\n          schools={schools}\n        />\n      )}\n    </main>\n  );\n}\n\nexport default Body;\n","import * as React from \"react\";\nimport Select, { ValueType } from \"react-select\";\nimport schools from \"../data/SchoolExpenses.json\";\nimport { ISchool } from \"src/models/Data.js\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, CardContent } from \"./Card\";\nimport * as Url from \"../utils/Url\";\nimport \"./Search.scss\";\n\ninterface IOption {\n  value: string;\n  label: string;\n}\n\nfunction isOption(option: ValueType<IOption>): option is IOption {\n  return Boolean(option) && (option as IOption).value !== undefined;\n}\n\ninterface IProps {\n  selectedSchools: ISchool[];\n}\n\nfunction Search({ selectedSchools }: IProps) {\n  const history = useHistory();\n\n  const selectedIds = selectedSchools.map(s => {\n    return {\n      value: s.id,\n      label: s.name\n    };\n  });\n\n  const isDisabled = () => {\n    return selectedIds.length >= 5;\n  };\n\n  function notAlreadySelected(school: any): boolean {\n    return !selectedIds.find(schoolId => schoolId === school.id);\n  }\n\n  const schoolsForComparison: ISchool[] = schools.filter(notAlreadySelected);\n  const options: IOption[] = schoolsForComparison.map((school: ISchool) => ({\n    value: school.id,\n    label: school.name\n  }));\n\n  // TODO how to get any out of this function\n  function selectSchool(selectedOptions: any) {\n    if (selectedOptions) {\n      const selectedIds = selectedOptions\n        .filter((o: IOption) => isOption(o))\n        .map((o: IOption) => o.value);\n      const queryString = Url.toQueryString(selectedIds);\n\n      history.push(`?${queryString}`);\n    } else {\n      history.push(\"\");\n    }\n  }\n\n  return (\n    <section className=\"search\">\n      <Card>\n        <CardContent>\n          <h2 className=\"search-header\">\n            Compare Budget Data by Schools <span>(Maximum 5)</span>\n          </h2>\n          <Select\n            options={options}\n            onChange={selectSchool}\n            isMulti={true}\n            isOptionDisabled={isDisabled}\n            value={selectedIds}\n          />\n          {/* <button onClick={resetAll}>Reset All</button> */}\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n\nexport default Search;\n","import * as React from \"react\";\nimport Search from \"./Search\";\nimport \"./Header.scss\";\nimport { ISchool } from \"src/models/Data\";\n\ntype Props = { schools: ISchool[] };\nfunction Header({ schools }: Props) {\n  return (\n    <>\n      <header className=\"main-header\">\n        <h1>SLPS BUDGET</h1>\n      </header>\n      {<Search selectedSchools={schools}/>}\n    </>\n  );\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport Body from \"./lib/Body\";\nimport Header from \"./lib/Header\";\nimport \"./App.scss\";\nimport { useLocation } from \"react-router-dom\";\nimport schoolExpenses from \"./data/SchoolExpenses.json\";\nimport { ISchool } from \"./models/Data\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst schoolExpensesDictionary = {};\nschoolExpenses.forEach(school => {\n  schoolExpensesDictionary[school.id] = school;\n});\n\nfunction App() {\n  const query = useQuery();\n  const selectedIds: string[] = query.getAll(\"id\");\n  const selectedSchools: ISchool[] = selectedIds.map(\n    id => schoolExpensesDictionary[id]\n  );\n\n  return (\n    <>\n      <Header schools={selectedSchools} />\n      <Body schools={selectedSchools} />\n    </>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport App from \"./App\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Route path=\"*\">\n        <App />\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport Router from \"./Router\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}