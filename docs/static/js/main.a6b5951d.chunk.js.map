{"version":3,"sources":["registerServiceWorker.ts","lib/Button.tsx","lib/Icon.tsx","lib/Card.tsx","lib/SchoolInformation.tsx","lib/Search.tsx","lib/SchoolInformationSlider.tsx","models/Data.ts","lib/Chart.tsx","lib/Table.tsx","lib/ViewOptions.tsx","models/GeneralExpenseConstants.ts","lib/GeneralExpense.tsx","models/FakeSubCategory.ts","lib/CategoryExpense.tsx","lib/Body.tsx","lib/Header.tsx","App.tsx","Router.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Button","className","type","title","children","onClick","Icon","CardHeader","CardContent","Card","onClose","SchoolInformation","school","schools","history","useHistory","schoolIds","map","s","id","filter","join","push","name","options","value","label","Search","onChange","option","undefined","isOption","isMultipleOptions","queryString","o","SchoolInformationSlider","useState","showSearch","setShowSearch","length","averageSchoolFunction","expenses","administrativeSalaries","projectedEnrollment","instructionalSalaries","instructionalSupportSalaries","nonInstructionalSupportSalaries","temp","benefits","transportation","discretionary","total","HC_exporting","Highcharts","HC_noDataToDisplay","lang","thousandsSep","Chart","caption","rows","series","chart","text","xAxis","categories","n","yAxis","min","align","labels","overflow","plotOptions","bar","dataLabels","enabled","legend","layout","verticalAlign","x","y","floating","borderWidth","backgroundColor","shadow","credits","tooltip","pointFormat","noData","style","fontWeight","fontSize","color","highcharts","Table","headers","clickHandler","i","key","row","selected","values","j","ViewOptions","toggle","compareWithAverage","onToggleChange","onCompareWithAverageChange","checked","GeneralExpense","categoryClickHandler","category","viewByOption","setViewByOption","setCompareWthAverage","avgOrTotal","tog","selectedSchools","selectedTypes","selectedAverages","averageExpenses","avgExp","includes","combinedSchoolsAndAverages","concat","getValue","val","toString","replace","data","r","Math","round","tableData","toFixed","subCategoryExpenseLabel","subCategoryTableData","reduce","agg","curr","Map","CategoryExpense","rowData","Body","selectedCategory","setSelectedCategory","event","currentTarget","Header","App","selectedIds","URLSearchParams","useLocation","search","getAll","schoolExpenses","Router","path","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"s++BAWMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,6CAOvBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,mCC7BlDC,MA7Cf,YAMW,IAAD,IALRC,iBAKQ,MALI,GAKJ,MAJRC,YAIQ,MAJD,UAIC,EAHRC,EAGQ,EAHRA,MACAC,EAEQ,EAFRA,SACAC,EACQ,EADRA,QAEA,OAAQH,GACN,IAAK,QACH,OACE,4BACEA,KAAK,SACLD,UAAS,UAAKA,EAAL,UACTE,MAAOA,EACPE,QAASA,GAERD,GAIP,IAAK,UACH,OACE,4BACEF,KAAK,SACLD,UAAS,UAAKA,EAAL,YACTE,MAAOA,EACPE,QAASA,GAERD,GAGP,IAAK,UACH,OACE,4BACEF,KAAK,SACLD,UAAS,UAAKA,EAAL,YACTE,MAAOA,EACPE,QAASA,GAERD,K,MCrCIE,MATf,YACE,OAD6B,EAAfJ,MAEZ,IAAK,QACH,OAAO,0BAAMD,UAAU,eACzB,IAAK,MACH,OAAO,0BAAMA,UAAU,eCCtB,SAASM,EAAT,GAA0D,IAApCH,EAAmC,EAAnCA,SAAmC,IAAzBH,iBAAyB,MAAb,GAAa,EAC9D,OAAO,uBAAKA,UAAS,UAAKA,EAAL,YAA0BG,GAG1C,SAASI,EAAT,GAA2D,IAApCJ,EAAmC,EAAnCA,SAAmC,IAAzBH,iBAAyB,MAAb,GAAa,EAC/D,OAAO,uBAAKA,UAAS,UAAKA,EAAL,aAA2BG,GAI3C,SAASK,EAAT,GAAiE,IAAjDL,EAAgD,EAAhDA,SAAgD,IAAtCH,iBAAsC,MAA1B,GAA0B,EAAtBS,EAAsB,EAAtBA,QAC/C,OACE,uBAAKT,UAAS,UAAKA,EAAL,UACXS,GACC,gBAAC,EAAD,CAAQR,KAAK,QAAQC,MAAM,QAAQF,UAAU,QAAQI,QAASK,GAC5D,gBAAC,EAAD,CAAMR,KAAK,WAGdE,G,YCcQO,MA/Bf,YAAwD,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAC7BC,EAAUC,cAChB,OACE,kBAAC,EAAD,CACEd,UAAU,qBACVS,QAAS,WACP,IAAMM,EAAYH,EACfI,KAAI,SAAAC,GAAC,OAAIA,EAAEC,MACXC,QAAO,SAAAD,GAAE,OAAIA,IAAOP,EAAOO,MAC3BF,KAAI,SAAAE,GAAE,mBAAUA,MAChBE,KAAK,KACRP,EAAQQ,KAAR,WAAiBN,MAGnB,kBAACT,EAAD,CAAYN,UAAU,UACpB,4BAAKW,EAAOW,OAEd,kBAACf,EAAD,KACE,4BACE,wCACA,qCACA,yCACA,iDACA,8CACA,6C,gBCtBJgB,G,MAAqBX,EAAQI,KAAI,SAACL,GAAD,MAAsB,CAC3Da,MAAOb,EAAOO,GACdO,MAAOd,EAAOW,UAuCDI,MA5Bf,WACE,IAAMb,EAAUC,cAahB,OACE,uBAAKd,UAAU,UACb,gBAAC,EAAD,KACE,gBAACO,EAAD,KACE,iDAEE,gBAAC,IAAD,CAAQgB,QAASA,EAASI,SAjBpC,SAAsBC,GACpB,GAZJ,SAAkBA,GAChB,OAAOnD,QAAQmD,SAAyCC,IAA7BD,EAAmBJ,MAWxCM,CAASF,GACXf,EAAQQ,KAAR,cAAoBO,EAAOJ,aACtB,GAVX,SAA2BI,GACzB,OAAOnD,QAAQmD,SAAqCC,IAAzBD,EASdG,CAAkBH,GAAS,CACpC,IAAMI,EAAcJ,EAAOZ,KAAI,SAAAiB,GAAC,mBAAUA,EAAET,UAASJ,KAAK,KAC1DP,EAAQQ,KAAR,WAAiBW,SAEjBnB,EAAQQ,KAAK,YCAJa,MAzBf,YAAsD,IAAnBtB,EAAkB,EAAlBA,QAAkB,EACfuB,oBAAS,GADM,mBAC5CC,EAD4C,KAChCC,EADgC,KAEnD,OACE,yBAAKrC,UAAU,4BACZY,EAAQ0B,OAAS,GAChB,kBAAC,EAAD,CACErC,KAAK,UACLG,QAAS,WACPiC,GAAc,KAGhB,kBAAC,EAAD,CAAMpC,KAAK,QANb,yBAUF,6BACGmC,GAAc,kBAAC,EAAD,MACdxB,EAAQI,KAAI,SAAAL,GAAM,OACjB,kBAAC,EAAD,CAAmBA,OAAQA,EAAQC,QAASA,U,QCmBzC2B,EAAwB,SAAC5B,GAmBpC,OAlBoB,eACfA,EADe,CAElB6B,SAAU,CACRC,uBACE9B,EAAO6B,SAASC,uBAAyB9B,EAAO+B,oBAClDC,sBACEhC,EAAO6B,SAASG,sBAAwBhC,EAAO+B,oBACjDE,6BACEjC,EAAO6B,SAASI,6BAA+BjC,EAAO+B,oBACxDG,gCACElC,EAAO6B,SAASK,gCAAkClC,EAAO+B,oBAC3DI,KAAMnC,EAAO6B,SAASM,KAAOnC,EAAO+B,oBACpCK,SAAUpC,EAAO6B,SAASO,SAAWpC,EAAO+B,oBAC5CM,eAAgBrC,EAAO6B,SAASQ,eAAiBrC,EAAO+B,oBACxDO,cAAetC,EAAO6B,SAASS,cAAgBtC,EAAO+B,oBACtDQ,MAAOvC,EAAO6B,SAASU,MAAQvC,EAAO+B,wB,0DCxD5CS,IAAaC,GACbC,IAAmBD,GACnBA,aAAsB,CACpBE,KAAM,CACJC,aAAc,OA4EHC,MAlEf,YAAmD,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,OACxBpC,EAA8B,CAClCqC,MAAO,CACL3D,KAAM,OAERC,MAAO,CACL2D,KAAMJ,GAERK,MAAO,CACLC,WAAYL,EAAK1C,KAAI,SAAAgD,GAAC,OAAIA,EAAEvC,UAE9BwC,MAAO,CACLC,IAAK,EACLhE,MAAO,CACL2D,KAAM,UACNM,MAAO,QAETC,OAAQ,CACNC,SAAU,YAGdC,YAAa,CACXC,IAAK,CACHC,WAAY,CACVC,SAAS,KAIfC,OAAQ,CACNC,OAAQ,WACRR,MAAO,QACPS,cAAe,MACfC,GAAI,GACJC,EAAG,IACHC,UAAU,EACVC,YAAa,EACbC,gBACG7B,iBAA0BsB,QACzBtB,iBAA0BsB,OAAOO,iBACnC,UACFC,QAAQ,GAEVC,QAAS,CACPV,SAAS,GAEXW,QAAS,CACPC,YAAa,2BAEf/B,KAAM,CACJgC,OAAQ,wDAEV3B,SACA2B,OAAQ,CACNC,MAAO,CACLC,WAAY,OACZC,SAAU,OACVC,MAAO,aAKb,OACI,gBAAC,IAAD,CAAiBC,WAAYvC,EAAY7B,QAASA,KCtCzCqE,MAjCf,YAAkE,IAAjDC,EAAgD,EAAhDA,QAASnC,EAAuC,EAAvCA,KAAMD,EAAiC,EAAjCA,QAASqC,EAAwB,EAAxBA,aACvC,OACE,6BACE,+BAAUrC,GACV,6BACE,0BACGoC,EAAQ7E,KAAI,SAACgD,EAAG+B,GACf,OAAO,sBAAIC,IAAKD,GAAI/B,QAI1B,6BACGN,EAAK1C,KAAI,SAACiF,EAAgBF,GACzB,OACE,sBACEC,IAAKD,EACL3F,QAAS0F,EACT5E,GAAI+E,EAAIxE,MACRzB,UAAWiG,EAAIC,SAAW,WAAa,IAEvC,0BAAKD,EAAIxE,OAERwE,EAAIE,OAAOnF,KAAI,SAACgD,EAAGoC,GAClB,OAAO,sBAAIJ,IAAKI,GAAIpC,a,sBCarBqC,MAtCf,YAKY,IAJVC,EAIS,EAJTA,OACAC,EAGS,EAHTA,mBACAC,EAES,EAFTA,eACAC,EACS,EADTA,2BAEA,OACE,uBAAKzG,UAAU,kBACb,6BACE,yBACEC,KAAK,QACLuB,MAAM,QACNkF,QAAoB,UAAXJ,EACT3E,SAAU6E,IALd,SASA,6BACE,yBACEvG,KAAK,QACLuB,MAAM,cACNkF,QAAoB,gBAAXJ,EACT3E,SAAU6E,IALd,eASA,6BACE,yBACEvG,KAAK,WACLyG,QAASH,EACT5E,SAAU8E,IAJd,6BClCO/C,EAAqB,CAC9B,CAAEjC,MAAO,QAASuE,IAAK,SACvB,CAAEvE,MAAO,0BAA2BuE,IAAK,0BACzC,CAAEvE,MAAO,yBAA0BuE,IAAK,yBACxC,CACIvE,MAAO,iCACPuE,IAAK,gCAET,CACIvE,MAAO,qCACPuE,IAAK,mCAET,CAAEvE,MAAO,OAAQuE,IAAK,QACtB,CAAEvE,MAAO,WAAYuE,IAAK,YAC1B,CAAEvE,MAAO,iBAAkBuE,IAAK,kBAChC,CAAEvE,MAAO,gBAAiBuE,IAAK,kBC6GpBW,MArGf,YAA8E,IAApD/F,EAAmD,EAAnDA,QAASgG,EAA0C,EAA1CA,qBAAsBC,EAAoB,EAApBA,SAAoB,EACnC1E,mBAAuB,SADY,mBACpE2E,EADoE,KACtDC,EADsD,OAExB5E,oBAAS,GAFe,mBAEpEoE,EAFoE,KAEhDS,EAFgD,KAgBrEC,EAAa,SAACC,GAClB,OAAO,SAACvG,GACN,MAAY,UAARuG,EACK3E,EAAsB5B,GAEtBA,IAKPwG,EAA6BvG,EAAQI,KAAI,SAAAL,GAAM,OACnDsG,EAAWH,EAAXG,CAAyBtG,MAGrByG,EAAgBD,EAAgBnG,KAAI,SAAAC,GAAC,OAAIA,EAAEhB,QAE3CoH,EAAmBC,EACtBnG,QAAO,SAAAoG,GACN,OAAOhB,GAAsBa,EAAcI,SAASD,EAAOtH,SAE5De,KAAI,SAAAL,GAAM,OAAIsG,EAAWH,EAAXG,CAAyBtG,MAEpC8G,EAA6BN,EAAgBO,OAAOL,GAEpDM,EAAW,SAACC,GAChB,OAAOA,EAAIC,WAAWC,QAAQ,wBAAyB,MAGnDjC,EAAU,CAAC,cAAc6B,OAC7BD,EAA2BzG,KAAI,SAAAgD,GAAC,OAAIA,EAAE1C,SAIlCqC,EAA8B8D,EAA2BzG,KAAI,SAACC,EAAG8E,GACrE,MAAO,CACL9F,KAAM,MACNqB,KAAMuE,EAAQE,EAAI,GAClBgC,KAAMrE,EAAK1C,KAAI,SAAAgH,GACb,OAAOC,KAAKC,MAA0B,IAApBjH,EAAEuB,SAASwF,EAAEhC,MAAc,WAM7CvC,EAAO,6BAAyBqD,EAAzB,MAEPqB,EAAyBzE,EAAK1C,KAClC,SAACiF,EAAiBF,GAChB,OAAO,eACFE,EADL,CAEEE,OAAQsB,EAA2BzG,KAAI,SAACgD,EAAGoC,GACzC,OACSuB,EADY,UAAjBb,EACc9C,EAAExB,SAASyD,EAAID,KAAK6B,WAEpB7D,EAAExB,SAASyD,EAAID,KAAKoC,QAAQ,OAGhDlC,SAAUD,EAAIxE,QAAUoF,OAK9B,OACE,2BAAS7G,UAAU,QACjB,gBAAC,EAAD,CACEyG,2BArEiC,WACrCO,GAAsBT,IAqElBC,eA9E2B,WAE7BO,EADmB,UAAjBD,EACc,cAEA,UA2EdR,OAAQQ,EACRP,mBAAoBA,IAEtB,uBAAKvG,UAAU,mBACb,gBAAC,EAAD,CACE6F,QAASA,EACTC,aAAcc,EACdnD,QAASA,EACTC,KAAMyE,IAER,uBAAKnI,UAAU,mBACb,gBAAC,EAAD,CAAO0D,KAAMA,EAAMC,OAAQA,EAAQF,QAASA,QCrHzC4E,EAA0B,CACnC,cACA,cACA,cACA,cACA,cACA,eAGSC,EAAqCD,EAAwBrH,KAAI,SAAAgD,GAC1E,MAAO,CACHvC,MAAOuC,EACPgC,IAAKhC,MAImDqE,EAAwBE,QAAO,SAACC,EAAKC,GAEjG,OADAD,EAAIC,GAAQ,EACLD,IACR,IAAIE,KCqDQC,MAvDf,YAAyD,IAA9B/H,EAA6B,EAA7BA,QAASiG,EAAoB,EAApBA,SAAoB,EACd1E,mBAAuB,SADT,mBAC/C2E,EAD+C,KACjCC,EADiC,OAEH5E,oBAAS,GAFN,mBAE/CoE,EAF+C,KAE3BS,EAF2B,KAgBhDnB,EAAU,CAAC,cAAc6B,OAAO9G,EAAQI,KAAI,SAAAgD,GAAC,OAAIA,EAAE1C,SACnDoC,EAAO4E,EACP7E,EAAO,UAAMoD,EAAN,cAAoBC,EAApB,MAEPnD,EAA8B/C,EAAQI,KAAI,SAACC,EAAG8E,GAClD,MAAO,CACL9F,KAAM,MACNqB,KAAMuE,EAAQE,EAAI,GAClBgC,KAAM,OAIJa,EAAuBlF,EAAK1C,KAAI,SAACiF,GACrC,OAAO,eACFA,EADL,CAEEE,OAAQvF,EAAQI,KAAI,WAClB,MAAO,wCAKb,OACE,2BAAShB,UAAU,QACjB,gBAAC,EAAD,CACEyG,2BA5BiC,WACrCO,GAAsBT,IA4BlBC,eArC2B,WAE7BO,EADmB,UAAjBD,EACc,cAEA,UAkCdR,OAAQQ,EACRP,mBAAoBA,IAEtB,uBAAKvG,UAAU,oBACb,gBAAC,EAAD,CAAO6F,QAASA,EAASpC,QAASA,EAASC,KAAMkF,IACjD,uBAAK5I,UAAU,mBACb,gBAAC,EAAD,CAAO2D,OAAQA,EAAQD,KAAMA,EAAMD,QAASA,QC/BvCoF,MA5Bf,YAAmC,IAAnBjI,EAAkB,EAAlBA,QAAkB,EACgBuB,mBAAS,IADzB,mBACzB2G,EADyB,KACPC,EADO,KAShC,OACE,wBAAM/I,UAAU,QACd,gBAAC,EAAD,CAAyBY,QAASA,IAClC,uBAAKZ,UAAU,iBACb,gBAAC,EAAD,CACEY,QAASA,EACTgG,qBAZmB,SACzBoC,GAEAD,EAAoBC,EAAMC,cAAc/H,KAUlC2F,SAAUiC,KAGbA,GAAyC,KAArBA,GACnB,uBAAK9I,UAAU,iBACb,gBAAC,EAAD,CAAiB6G,SAAUiC,EAAkBlI,QAASA,O,MCZjDsI,MAXf,YAAqC,IAAnBtI,EAAkB,EAAlBA,QAChB,OACE,gCACE,0BAAQZ,UAAU,UAChB,0CAEDY,EAAQ0B,QAAU,GAAK,gBAAC,EAAD,Q,MCef6G,MAff,WACE,IACMC,EALC,IAAIC,gBAAgBC,cAAcC,QAKLC,OAAO,MACrCrC,EAA6BsC,EAAetI,QAChD,SAAAR,GAAM,OAAIyI,EAAY5B,SAAS7G,EAAOO,OAGxC,OACE,gCACE,gBAAC,EAAD,CAAQN,QAASuG,IACjB,gBAAC,EAAD,CAAMvG,QAASuG,M,QCRNuC,MAVf,WACE,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,KAAK,KACV,gBAAC,EAAD,SCFRC,SAAgB,gBAAC,EAAD,MAAYC,SAASC,eAAe,SnBerC,WACb,GAA6C,kBAAmB9K,UAAW,CAMzE,GAJkB,IAAI+K,IACpBC,IACAtL,OAAOC,SAASkJ,YAEJoC,SAAWvL,OAAOC,SAASsL,OAIvC,OAGFvL,OAAOwL,iBAAiB,QAAQ,WAC9B,IAAMnL,EAAK,UAAMiL,IAAN,sBAEPxL,IAmDV,SAAiCO,GAE/BoL,MAAMpL,GACHI,MAAK,SAAAiL,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASvE,QAAQyE,IAAI,gBAAiBC,QAAQ,cAG9CvL,UAAUC,cAAcuL,MAAMrL,MAAK,SAAAC,GACjCA,EAAaqL,aAAatL,MAAK,WAC7BT,OAAOC,SAAS+L,eAKpB5L,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAvEA+K,CAAwB5L,GAIxBC,UAAUC,cAAcuL,MAAMrL,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OmB7CxB6L,K","file":"static/js/main.a6b5951d.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./Button.scss\";\n\ntype Type = \"image\" | \"primary\" | \"default\";\ntype Props = {\n  className?: string;\n  type?: Type;\n  title?: string;\n  children: JSX.Element | (JSX.Element | string)[] | string;\n  onClick?: () => void;\n};\nfunction Button({\n  className = \"\",\n  type = \"default\",\n  title,\n  children,\n  onClick\n}: Props) {\n  switch (type) {\n    case \"image\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} image`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n\n    case \"primary\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} primary`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n    case \"default\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} default`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport \"./Icon.scss\";\n\ntype Props = { type: \"close\" | \"add\" };\nfunction Icon({ type }: Props) {\n  switch (type) {\n    case \"close\":\n      return <span className=\"icon close\"></span>;\n    case \"add\":\n      return <span className=\"icon add\"></span>;\n  }\n}\n\nexport default Icon;\n","import * as React from \"react\";\nimport \"./Card.scss\";\nimport Button from \"./Button\";\nimport Icon from \"./Icon\";\n\ntype Props = {\n  className?: string;\n  children: JSX.Element | JSX.Element[];\n};\n\nexport function CardHeader({ children, className = \"\" }: Props) {\n  return <div className={`${className} header`}>{children}</div>;\n}\n\nexport function CardContent({ children, className = \"\" }: Props) {\n  return <div className={`${className} content`}>{children}</div>;\n}\n\ntype CardProps = Props & { onClose?: () => void };\nexport function Card({ children, className = \"\", onClose }: CardProps) {\n  return (\n    <div className={`${className} card`}>\n      {onClose && (\n        <Button type=\"image\" title=\"Close\" className=\"close\" onClick={onClose}>\n          <Icon type=\"close\" />\n        </Button>\n      )}\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./SchoolInformation.scss\";\nimport { ISchool } from \"src/models/Data\";\nimport { Card, CardHeader, CardContent } from \"./Card\";\nimport { useHistory } from \"react-router-dom\";\n\ntype Props = {\n  school: ISchool;\n  schools: ISchool[];\n};\nfunction SchoolInformation({ school, schools }: Props) {\n  const history = useHistory();\n  return (\n    <Card\n      className=\"school-information\"\n      onClose={() => {\n        const schoolIds = schools\n          .map(s => s.id)\n          .filter(id => id !== school.id)\n          .map(id => `id=${id}`)\n          .join(\"&\");\n        history.push(`?${schoolIds}`);\n      }}\n    >\n      <CardHeader className=\"header\">\n        <h2>{school.name}</h2>\n      </CardHeader>\n      <CardContent>\n        <dl>\n          <dt>Zip Code</dt>\n          <dd>63108</dd>\n          <dt>Principal</dt>\n          <dd>Dr. Rick Marshall</dd>\n          <dt>Vice Principal</dt>\n          <dd>Dr. Seuss</dd>\n        </dl>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default SchoolInformation;\n","import * as React from \"react\";\nimport Select, { ValueType } from \"react-select\";\nimport schools from \"../data/SchoolExpenses.json\";\nimport { ISchool } from \"src/models/Data.js\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, CardContent } from \"./Card\";\nimport \"./Search.scss\";\n\ninterface IOption {\n  value: string;\n  label: string;\n}\nconst options: IOption[] = schools.map((school: ISchool) => ({\n  value: school.id,\n  label: school.name\n}));\n\nfunction isOption(option: ValueType<IOption>): option is IOption {\n  return Boolean(option) && (option as IOption).value !== undefined;\n}\n\nfunction isMultipleOptions(option: ValueType<IOption>): option is IOption[] {\n  return Boolean(option) && (option as IOption[]) !== undefined;\n}\n\nfunction Search() {\n  const history = useHistory();\n\n  function selectSchool(option: ValueType<IOption>) {\n    if (isOption(option)) {\n      history.push(`?id=${option.value}`);\n    } else if (isMultipleOptions(option)) {\n      const queryString = option.map(o => `id=${o.value}`).join(\"&\");\n      history.push(`?${queryString}`);\n    } else {\n      history.push(\"\");\n    }\n  }\n\n  return (\n    <div className=\"search\">\n      <Card>\n        <CardContent>\n          <label>\n            Find your school:\n            <Select options={options} onChange={selectSchool} />\n          </label>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useState } from \"react\";\nimport \"./SchoolInformationSlider.scss\";\nimport SchoolInformation from \"./SchoolInformation\";\nimport { ISchool } from \"src/models/Data\";\nimport Button from \"./Button\";\nimport Icon from \"./Icon\";\nimport Search from \"./Search\";\n\ntype Props = { schools: ISchool[] };\n\nfunction SchoolInformationSlider({ schools }: Props) {\n  const [showSearch, setShowSearch] = useState(false);\n  return (\n    <div className=\"school-information-panel\">\n      {schools.length > 0 && (\n        <Button\n          type=\"default\"\n          onClick={() => {\n            setShowSearch(true);\n          }}\n        >\n          <Icon type=\"add\"></Icon>\n          Add school to compare\n        </Button>\n      )}\n      <div>\n        {showSearch && <Search></Search>}\n        {schools.map(school => (\n          <SchoolInformation school={school} schools={schools} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SchoolInformationSlider;\n","export interface ISchool {\n  id: string;\n  name: string;\n  type: string;\n  address?: string;\n  principal?: string;\n  phone?: string;\n  projectedEnrollment: number;\n  expenses: IGeneralSchoolExpense;\n}\n\nexport interface IGeneralSchoolExpense {\n  total: number;\n  administrativeSalaries: number;\n  instructionalSalaries: number;\n  instructionalSupportSalaries: number;\n  nonInstructionalSupportSalaries: number;\n  temp: number;\n  benefits: number;\n  transportation: number;\n  discretionary: number;\n}\nexport type SubCategorySchoolExpense = Map<string, number>;\n\nexport type SchoolExpense = IGeneralSchoolExpense | SubCategorySchoolExpense;\n\nexport type SchoolType = \"H\" | \"M\" | \"E\" | \"A\";\n\nexport const SchoolTypeToTypeLabel = {\n  H: \"High\",\n  M: \"Middle\",\n  E: \"Elementary\",\n  A: \"Alternative\"\n};\n\nexport interface ITableData {\n  label: string;\n  key: string;\n}\n\nexport interface ITableRow {\n  label: string;\n  values: string[];\n  selected?: boolean;\n}\n\n\nexport const averageSchoolFunction = (school: ISchool) => {\n  const averagedSchool = {\n    ...school,\n    expenses: {\n      administrativeSalaries:\n        school.expenses.administrativeSalaries / school.projectedEnrollment,\n      instructionalSalaries:\n        school.expenses.instructionalSalaries / school.projectedEnrollment,\n      instructionalSupportSalaries:\n        school.expenses.instructionalSupportSalaries / school.projectedEnrollment,\n      nonInstructionalSupportSalaries:\n        school.expenses.nonInstructionalSupportSalaries / school.projectedEnrollment,\n      temp: school.expenses.temp / school.projectedEnrollment,\n      benefits: school.expenses.benefits / school.projectedEnrollment,\n      transportation: school.expenses.transportation / school.projectedEnrollment,\n      discretionary: school.expenses.discretionary / school.projectedEnrollment,\n      total: school.expenses.total / school.projectedEnrollment\n    },\n  };\n  return averagedSchool;\n}\n\nexport type ViewByOption = \"Total\" | \"Per Student\";","import * as React from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport { ITableData } from \"../models/Data\";\nimport HC_exporting from \"highcharts/modules/exporting\";\nimport HC_noDataToDisplay from \"highcharts/modules/no-data-to-display\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nHC_exporting(Highcharts);\nHC_noDataToDisplay(Highcharts);\nHighcharts.setOptions({\n  lang: {\n    thousandsSep: \",\"\n  }\n});\n\ninterface IProps {\n  caption: string;\n  rows: ITableData[];\n  series: Highcharts.SeriesOptionsType[];\n}\n\nfunction Chart({ caption, rows, series }: IProps) {\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"bar\"\n    },\n    title: {\n      text: caption\n    },\n    xAxis: {\n      categories: rows.map(n => n.label)\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"Dollars\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true\n        }\n      }\n    },\n    legend: {\n      layout: \"vertical\",\n      align: \"right\",\n      verticalAlign: \"top\",\n      x: -40,\n      y: 120,\n      floating: true,\n      borderWidth: 1,\n      backgroundColor:\n        (Highcharts.defaultOptions.legend &&\n          Highcharts.defaultOptions.legend.backgroundColor) ||\n        \"#FFFFFF\",\n      shadow: true\n    },\n    credits: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormat: \"Value: {point.y:,.2f} $\"\n    },\n    lang: {\n      noData: \"Chart Unavailable because data has not been released\"\n    },\n    series,\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n        color: \"#303030\"\n      }\n    }\n  };\n\n  return (\n      <HighchartsReact highcharts={Highcharts} options={options} />\n  );\n}\n\nexport default Chart;\n","import * as React from \"react\";\nimport { ITableRow } from \"../models/Data\";\n\ninterface IProps {\n  headers: string[];\n  rows: ITableRow[];\n  caption: string;\n  clickHandler?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ) => void;\n}\n\nfunction Table({ headers, rows, caption, clickHandler }: IProps) {\n  return (\n    <table>\n      <caption>{caption}</caption>\n      <thead>\n        <tr>\n          {headers.map((n, i) => {\n            return <th key={i}>{n}</th>;\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((row: ITableRow, i: number) => {\n          return (\n            <tr\n              key={i}\n              onClick={clickHandler}\n              id={row.label}\n              className={row.selected ? \"selected\" : \"\"}\n            >\n              <td>{row.label}</td>\n\n              {row.values.map((n, j: number) => {\n                return <td key={j}>{n}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import * as React from \"react\";\nimport \"./ViewOptions.scss\";\n\ninterface IProps {\n  toggle: string;\n  compareWithAverage: boolean;\n  onToggleChange: () => void;\n  onCompareWithAverageChange: () => void;\n}\n\nfunction ViewOptions({\n  toggle,\n  compareWithAverage,\n  onToggleChange,\n  onCompareWithAverageChange\n}: IProps) {\n  return (\n    <div className=\"displayOptions\">\n      <label>\n        <input\n          type=\"radio\"\n          value=\"Total\"\n          checked={toggle === \"Total\"}\n          onChange={onToggleChange}\n        />\n        Total\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"Per Student\"\n          checked={toggle === \"Per Student\"}\n          onChange={onToggleChange}\n        />\n        Per Student\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={compareWithAverage}\n          onChange={onCompareWithAverageChange}\n        />\n        Compare against Average\n      </label>\n    </div>\n  );\n}\n\nexport default ViewOptions;\n","import { ITableData } from './Data';\n\nexport const rows: ITableData[] = [\n    { label: \"Total\", key: \"total\" },\n    { label: \"Administrative Salaries\", key: \"administrativeSalaries\" },\n    { label: \"Instructional Salaries\", key: \"instructionalSalaries\" },\n    {\n        label: \"Instructional Support Salaries\",\n        key: \"instructionalSupportSalaries\"\n    },\n    {\n        label: \"Non Instructional Support Salaries\",\n        key: \"nonInstructionalSupportSalaries\"\n    },\n    { label: \"Temp\", key: \"temp\" },\n    { label: \"Benefits\", key: \"benefits\" },\n    { label: \"Transportation\", key: \"transportation\" },\n    { label: \"Discretionary\", key: \"discretionary\" }\n];\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  ITableData,\n  ISchool,\n  ITableRow,\n  ViewByOption,\n  averageSchoolFunction\n} from \"../models/Data\";\nimport { SeriesOptionsType } from \"highcharts\";\nimport Chart from \"./Chart\";\nimport Table from \"./Table\";\nimport \"./GeneralExpense.scss\";\nimport averageExpenses from \"../data/SchoolAverages.json\";\nimport ViewOptions from \"./ViewOptions\";\nimport { rows } from \"../models/GeneralExpenseConstants\";\n\ninterface IProps {\n  schools: ISchool[];\n  categoryClickHandler: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ) => void;\n  category: string;\n}\n\nfunction GeneralExpense({ schools, categoryClickHandler, category }: IProps) {\n  const [viewByOption, setViewByOption] = useState<ViewByOption>(\"Total\");\n  const [compareWithAverage, setCompareWthAverage] = useState(false);\n\n  const handleViewByOptionChange = () => {\n    if (viewByOption === \"Total\") {\n      setViewByOption(\"Per Student\");\n    } else {\n      setViewByOption(\"Total\");\n    }\n  };\n\n  const handleCompareWithAverageChange = () => {\n    setCompareWthAverage(!compareWithAverage);\n  };\n\n  const avgOrTotal = (tog: string): ((school: ISchool) => ISchool) => {\n    return (school: ISchool) => {\n      if (tog !== \"Total\") {\n        return averageSchoolFunction(school);\n      } else {\n        return school;\n      }\n    };\n  };\n\n  const selectedSchools: ISchool[] = schools.map(school =>\n    avgOrTotal(viewByOption)(school)\n  );\n\n  const selectedTypes = selectedSchools.map(s => s.type);\n\n  const selectedAverages = averageExpenses\n    .filter(avgExp => {\n      return compareWithAverage && selectedTypes.includes(avgExp.type);\n    })\n    .map(school => avgOrTotal(viewByOption)(school));\n\n  const combinedSchoolsAndAverages = selectedSchools.concat(selectedAverages);\n\n  const getValue = (val: string): string => {\n    return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const headers = [\"Field Name\"].concat(\n    combinedSchoolsAndAverages.map(n => n.name)\n  );\n\n  // Compute chart data to display\n  const series: SeriesOptionsType[] = combinedSchoolsAndAverages.map((s, i) => {\n    return {\n      type: \"bar\",\n      name: headers[i + 1],\n      data: rows.map(r => {\n        return Math.round(s.expenses[r.key] * 100) / 100;\n      })\n    };\n  });\n\n  // Compute table data to display\n  const caption = `General Expenses ( ${viewByOption} )`;\n\n  const tableData: ITableRow[] = rows.map(\n    (row: ITableData, i: number): ITableRow => {\n      return {\n        ...row,\n        values: combinedSchoolsAndAverages.map((n, j: number): string => {\n          if (viewByOption === \"Total\") {\n            return getValue(n.expenses[row.key].toString());\n          } else {\n            return getValue(n.expenses[row.key].toFixed(2));\n          }\n        }),\n        selected: row.label === category\n      };\n    }\n  );\n\n  return (\n    <section className=\"card\">\n      <ViewOptions\n        onCompareWithAverageChange={handleCompareWithAverageChange}\n        onToggleChange={handleViewByOptionChange}\n        toggle={viewByOption}\n        compareWithAverage={compareWithAverage}\n      />\n      <div className=\"expense-section\">\n        <Table\n          headers={headers}\n          clickHandler={categoryClickHandler}\n          caption={caption}\n          rows={tableData}\n        />\n        <div className=\"chart-container\">\n          <Chart rows={rows} series={series} caption={caption} />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default GeneralExpense;\n","import { ITableData, SubCategorySchoolExpense } from \"./Data\";\n\nexport const subCategoryExpenseLabel = [\n    \"Line Item 1\",\n    \"Line Item 2\",\n    \"Line Item 3\",\n    \"Line Item 4\",\n    \"Line Item 5\",\n    \"Line Item 6\"\n];\n\nexport const subCategoryTableData: ITableData[] = subCategoryExpenseLabel.map(n => {\n    return {\n        label: n,\n        key: n\n    }\n})\n\nexport const subCategoryExpenseData: SubCategorySchoolExpense = subCategoryExpenseLabel.reduce((agg, curr) => {\n    agg[curr] = 0;\n    return agg;\n}, new Map<string, number>());","import * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  ITableData,\n  ISchool,\n  ITableRow,\n  ViewByOption\n} from \"../models/Data\";\nimport { SeriesOptionsType } from \"highcharts\";\nimport Table from \"./Table\";\nimport Chart from \"./Chart\";\nimport ViewOptions from \"./ViewOptions\";\nimport { subCategoryTableData } from \"../models/FakeSubCategory\";\n\ninterface IProps {\n  schools: ISchool[];\n  category: string;\n}\n\nfunction CategoryExpense({ schools, category }: IProps) {\n  const [viewByOption, setViewByOption] = useState<ViewByOption>(\"Total\");\n  const [compareWithAverage, setCompareWthAverage] = useState(false);\n\n  const handleViewByOptionChange = () => {\n    if (viewByOption === \"Total\") {\n      setViewByOption(\"Per Student\");\n    } else {\n      setViewByOption(\"Total\");\n    }\n  };\n\n  const handleCompareWithAverageChange = () => {\n    setCompareWthAverage(!compareWithAverage);\n  };\n\n  const headers = [\"Field Name\"].concat(schools.map(n => n.name));\n  const rows = subCategoryTableData;\n  const caption = `${category} ( ${viewByOption} )`;\n\n  const series: SeriesOptionsType[] = schools.map((s, i) => {\n    return {\n      type: \"bar\",\n      name: headers[i + 1],\n      data: []\n    };\n  });\n\n  const rowData: ITableRow[] = rows.map((row: ITableData) => {\n    return {\n      ...row,\n      values: schools.map((): string => {\n        return \"This Data Has Not Been Shared\";\n      })\n    };\n  });\n\n  return (\n    <section className=\"card\">\n      <ViewOptions\n        onCompareWithAverageChange={handleCompareWithAverageChange}\n        onToggleChange={handleViewByOptionChange}\n        toggle={viewByOption}\n        compareWithAverage={compareWithAverage}\n      />\n      <div className=\"expense-section \">\n        <Table headers={headers} caption={caption} rows={rowData} />\n        <div className=\"chart-container\">\n          <Chart series={series} rows={rows} caption={caption} />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default CategoryExpense;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { ISchool } from \"../models/Data\";\nimport SchoolInformationSlider from \"./SchoolInformationSlider\";\nimport GeneralExpense from \"./GeneralExpense\";\nimport CategoryExpense from \"./CategoryExpense\";\n\ntype Props = { schools: ISchool[] };\nfunction Body({ schools }: Props) {\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  const categoryClickEvent = (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ): void => {\n    setSelectedCategory(event.currentTarget.id);\n  };\n\n  return (\n    <main className=\"body\">\n      <SchoolInformationSlider schools={schools} />\n      <div className=\"expense-panel\">\n        <GeneralExpense\n          schools={schools}\n          categoryClickHandler={categoryClickEvent}\n          category={selectedCategory}\n        />\n      </div>\n      {selectedCategory && selectedCategory !== \"\" && (\n        <div className=\"expense-panel\">\n          <CategoryExpense category={selectedCategory} schools={schools} />\n        </div>\n      )}\n    </main>\n  );\n}\n\nexport default Body;\n","import * as React from \"react\";\nimport Search from \"./Search\";\nimport \"./Header.scss\";\nimport { ISchool } from \"src/models/Data\";\n\ntype Props = { schools: ISchool[] };\nfunction Header({ schools }: Props) {\n  return (\n    <>\n      <header className=\"header\">\n        <h1>SLPS Budget</h1>\n      </header>\n      {schools.length <= 0 && <Search />}\n    </>\n  );\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport Body from \"./lib/Body\";\nimport Header from \"./lib/Header\";\nimport \"./App.scss\";\nimport { useLocation } from \"react-router-dom\";\nimport schoolExpenses from \"./data/SchoolExpenses.json\";\nimport { ISchool } from \"./models/Data\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction App() {\n  const query = useQuery();\n  const selectedIds: string[] = query.getAll(\"id\");\n  const selectedSchools: ISchool[] = schoolExpenses.filter(\n    school => selectedIds.includes(school.id)\n  );\n\n  return (\n    <>\n      <Header schools={selectedSchools} />\n      <Body schools={selectedSchools} />\n    </>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport App from \"./App\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Route path=\"*\">\n        <App />\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport Router from \"./Router\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}