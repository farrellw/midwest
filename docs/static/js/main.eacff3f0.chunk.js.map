{"version":3,"sources":["models/GeneralExpenseConstants.ts","lib/Chart.tsx","lib/Table.tsx","lib/GeneralExpense.tsx","lib/CategoryExpense.tsx","models/FakeSubCategory.ts","lib/Body.tsx","lib/Search.tsx","lib/Header.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["rows","label","key","HC_exporting","Highcharts","lang","thousandsSep","Chart","caption","series","options","chart","type","title","text","xAxis","categories","map","n","yAxis","min","align","labels","overflow","plotOptions","bar","dataLabels","enabled","legend","layout","verticalAlign","x","y","floating","borderWidth","backgroundColor","shadow","credits","tooltip","pointFormat","highcharts","Table","headers","clickHandler","i","row","onClick","id","className","selected","values","j","Expense","selectedSchools","toggle","category","getValue","val","toString","replace","s","name","data","r","Math","round","tableData","projectedEnrollment","concat","toFixed","CategoryExpense","rowData","subCategoryExpenseLabel","subCategoryTableData","subCategoryExpenseData","reduce","agg","curr","Map","Body","useState","setToggle","selectedCategory","setSelectedCategory","selectedIds","URLSearchParams","useLocation","search","getAll","schoolExpenses","filter","school","includes","administrativeSalaries","instructionalSalaries","instructionalSupportSalaries","nonInstructionalSupportSalaries","temp","benefits","transportation","discretionary","onChange","checked","uncheckedIcon","checkedIcon","offColor","onColor","GeneralExpense","event","currentTarget","schools","value","Search","history","useHistory","option","Boolean","undefined","isOption","push","Header","App","path","React","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.eacff3f0.chunk.js","sourcesContent":["import { ITableData } from './Data';\n\nexport const rows: ITableData[] = [\n    { label: \"Administrative Salaries\", key: \"administrativeSalaries\" },\n    { label: \"Instructional Salaries\", key: \"instructionalSalaries\" },\n    {\n        label: \"Instructional Support Salaries\",\n        key: \"instructionalSupportSalaries\"\n    },\n    {\n        label: \"Non Instructional Support Salaries\",\n        key: \"nonInstructionalSupportSalaries\"\n    },\n    { label: \"Temp\", key: \"temp\" },\n    { label: \"Benefits\", key: \"benefits\" },\n    { label: \"Transportation\", key: \"transportation\" },\n    { label: \"Discretionary\", key: \"discretionary\" }\n];\n","import * as React from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport { ITableData } from \"../models/Data\";\nimport HC_exporting from \"highcharts/modules/exporting\";\nimport HighchartsReact from \"highcharts-react-official\";\nHC_exporting(Highcharts);\n\nHighcharts.setOptions({\n  lang: {\n    thousandsSep: \",\"\n  }\n});\n\ninterface IProps {\n  caption: string;\n  rows: ITableData[];\n  series: Highcharts.SeriesOptionsType[];\n}\n\nfunction Chart({ caption, rows, series }: IProps) {\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"bar\"\n    },\n    title: {\n      text: caption\n    },\n    xAxis: {\n      categories: rows.map(n => n.label)\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"Dollars\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true\n        }\n      }\n    },\n    legend: {\n      layout: \"vertical\",\n      align: \"right\",\n      verticalAlign: \"top\",\n      x: -40,\n      y: 150,\n      floating: true,\n      borderWidth: 1,\n      backgroundColor:\n        (Highcharts.defaultOptions.legend &&\n          Highcharts.defaultOptions.legend.backgroundColor) ||\n        \"#FFFFFF\",\n      shadow: true\n    },\n    credits: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormat: \"Value: {point.y:,.2f} $\"\n    },\n    series\n  };\n\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n}\n\nexport default Chart;\n","import * as React from \"react\";\nimport { ITableRow } from \"../models/Data\";\n\ninterface IProps {\n    headers: string[];\n    rows: ITableRow[];\n    caption: string;\n    clickHandler?: (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n}\n\n{/* <span className={classFromParent + \" \" + textWithIconClass}>\n        {text}\n        <img className=\"info-icon\" data-tip={tooltip} src={infoIcon} alt=\"\" />\n      </span> */}\n\nfunction Table({ headers, rows, caption, clickHandler }: IProps) {\n\n    return (\n        <table>\n            <caption>{caption}</caption>\n            <thead>\n                <tr>\n                    {headers.map((n, i) => {\n                        return <th key={i}>{n}</th>;\n                    })}\n                </tr>\n            </thead>\n            <tbody>\n                {rows.map((row: ITableRow, i: number) => {\n                    return (\n                        <tr key={i} onClick={clickHandler} id={row.label} className={row.selected ? \"selected\" : \"\"}>\n                            <td>{row.label}</td>\n\n                            {row.values.map((n, j: number) => {\n                                return <td key={j}>{n}</td>;\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","import * as React from \"react\";\nimport { ITableData, IGeneralSchoolExpense, ITableRow } from \"../models/Data\";\nimport * as Highcharts from \"highcharts\";\nimport Chart from \"./Chart\";\nimport Table from \"./Table\";\n\ninterface IProps {\n    selectedSchools: IGeneralSchoolExpense[];\n    headers: string[];\n    rows: ITableData[];\n    caption: string;\n    toggle: string;\n    clickHandler?: (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n    category: string;\n}\n\nfunction Expense({ selectedSchools, headers, rows, caption, clickHandler, toggle, category }: IProps) {\n    const getValue = (val: string): string => {\n        return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    };\n    const series: Highcharts.SeriesOptionsType[] = selectedSchools.map((s, i) => {\n        return {\n            type: \"bar\",\n            name: headers[i + 1],\n            data: rows.map(r => {\n                return Math.round(s[r.key] * 100) / 100;\n            }\n            )\n        }\n    })\n\n    // Compute table data to display\n    const enrollmentRow: ITableRow = {\n        label: \"Enrollment\",\n        values: selectedSchools.map(n => (n.projectedEnrollment).toString())\n    }\n    const tableData: ITableRow[] = [enrollmentRow].concat(rows.map((row: ITableData, i: number): ITableRow => {\n        return {\n            ...row,\n            values: selectedSchools.map((n, j: number): string => {\n                if (toggle === \"Total\") {\n                    return getValue(n[row.key].toString())\n                } else {\n                    return getValue(n[row.key].toFixed(2))\n                }\n            }),\n            selected: row.label === category\n        }\n    }))\n\n    return (\n        <section className=\"expense-section\">\n            <Table headers={headers} clickHandler={clickHandler} caption={caption} rows={tableData} />\n            <Chart rows={rows} series={series} caption={caption} />\n        </section>\n    );\n}\n\nexport default Expense;","import * as React from \"react\";\nimport { ITableData, SchoolExpense, ITableRow } from \"../models/Data\";\nimport * as Highcharts from \"highcharts\";\nimport Table from './Table';\nimport Chart from \"./Chart\";\n\nHighcharts.setOptions({\n    lang: {\n        thousandsSep: ','\n    }\n})\n\ninterface IProps {\n    selectedSchools: SchoolExpense[];\n    headers: string[];\n    rows: ITableData[];\n    caption: string;\n    clickHandler?: (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n}\n\nfunction CategoryExpense({ selectedSchools, headers, rows, caption, clickHandler }: IProps) {\n    const series: Highcharts.SeriesOptionsType[] = selectedSchools.map((s, i) => {\n        return {\n            type: \"bar\",\n            name: headers[i + 1],\n            data: rows.map(r => {\n                return s[r.key];\n            }\n            )\n        }\n    })\n\n    const rowData: ITableRow[] = rows.map((row: ITableData) => {\n        return {\n            ...row,\n            values: selectedSchools.map((): string => {\n                return \"This Data Has Not Been Shared\";\n            })\n        }\n    })\n\n    return (\n        <section className=\"expense-section\">\n            <Table headers={headers} caption={caption} clickHandler={clickHandler} rows={rowData} />\n            <Chart series={series} rows={rows} caption={caption} />\n        </section>\n    );\n}\n\nexport default CategoryExpense;\n","import { ITableData, SubCategorySchoolExpense } from \"./Data\";\n\nexport const subCategoryExpenseLabel = [\n    \"Line Item 1\",\n    \"Line Item 2\",\n    \"Line Item 3\",\n    \"Line Item 4\",\n    \"Line Item 5\",\n    \"Line Item 6\"\n];\n\nexport const subCategoryTableData: ITableData[] = subCategoryExpenseLabel.map(n => {\n    return {\n        label: n,\n        key: n\n    }\n})\n\nexport const subCategoryExpenseData: SubCategorySchoolExpense = subCategoryExpenseLabel.reduce((agg, curr) => {\n    agg[curr] = 0;\n    return agg;\n}, new Map<string, number>());","import * as React from \"react\";\nimport { useState } from \"react\";\nimport schoolExpenses from \"../data/SchoolExpenses.json\";\nimport { IGeneralSchoolExpense } from \"../models/Data\";\nimport { rows } from \"../models/GeneralExpenseConstants\";\nimport GeneralExpense from \"./GeneralExpense\";\nimport CategoryExpense from \"./CategoryExpense\";\nimport {\n  subCategoryExpenseData,\n  subCategoryTableData\n} from \"../models/FakeSubCategory\";\nimport Switch from \"react-switch\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nfunction Body() {\n  const [toggle, setToggle] = useState(\"Total\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const query = useQuery();\n\n  const selectedIds: string[] = query.getAll(\"id\");\n\n  const selectedSchools: IGeneralSchoolExpense[] = schoolExpenses\n    .filter(school => {\n      return selectedIds.includes(school.id);\n    })\n    .map(school => {\n      if (toggle !== \"Total\") {\n        const averagedSchool = {\n          ...school,\n          administrativeSalaries:\n            school.administrativeSalaries / school.projectedEnrollment,\n          instructionalSalaries:\n            school.instructionalSalaries / school.projectedEnrollment,\n          instructionalSupportSalaries:\n            school.instructionalSupportSalaries / school.projectedEnrollment,\n          nonInstructionalSupportSalaries:\n            school.nonInstructionalSupportSalaries / school.projectedEnrollment,\n          temp: school.temp / school.projectedEnrollment,\n          benefits: school.benefits / school.projectedEnrollment,\n          transportation: school.transportation / school.projectedEnrollment,\n          discretionary: school.discretionary / school.projectedEnrollment\n        };\n        return averagedSchool;\n      } else {\n        return school;\n      }\n    });\n\n  const handleChange = () => {\n    if (toggle === \"Total\") {\n      setToggle(\"Per Student\");\n    } else {\n      setToggle(\"Total\");\n    }\n  };\n\n  const clickEvent = (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ): void => {\n    setSelectedCategory(event.currentTarget.id);\n  };\n\n  return (\n    <section className=\"body\">\n      <div>\n        <label>\n          <span>Total</span>\n          <Switch\n            onChange={handleChange}\n            checked={toggle === \"Per Student\"}\n            uncheckedIcon={false}\n            checkedIcon={false}\n            offColor={\"#34baeb\"}\n            onColor={\"#a2eb34\"}\n          />\n          <span>Per Student</span>\n        </label>\n      </div>\n      <GeneralExpense\n        selectedSchools={selectedSchools}\n        headers={[\"Field Name\"].concat(selectedSchools.map(n => n.name))}\n        rows={rows}\n        caption={`General Expenses ( ${toggle} )`}\n        clickHandler={clickEvent}\n        toggle={toggle}\n        category={selectedCategory}\n      />\n      {selectedCategory && selectedCategory !== \"\" && (\n        <CategoryExpense\n          selectedSchools={selectedIds.map(n => subCategoryExpenseData)}\n          headers={[\"Field Name\"].concat(selectedSchools.map(n => n.name))}\n          rows={subCategoryTableData}\n          caption={`${selectedCategory} ( ${toggle} )`}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default Body;\n","import * as React from \"react\";\nimport Select, { ValueType } from \"react-select\";\nimport schools from \"../data/SchoolExpenses.json\";\nimport { IGeneralSchoolExpense } from \"src/models/Data.js\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface IOption {\n  value: string;\n  label: string;\n}\nconst options: IOption[] = schools.map((school: IGeneralSchoolExpense) => ({\n  value: school.id,\n  label: school.name\n}));\n\nfunction isOption(option: ValueType<IOption>): option is IOption {\n  return Boolean(option) && (option as IOption).value !== undefined;\n}\n\nfunction Search() {\n  const history = useHistory();\n\n  function selectSchool(option: ValueType<IOption>) {\n    if (isOption(option)) {\n      history.push(`/?id=${option.value}`);\n    }\n  }\n\n  return (\n    <>\n      <Select options={options} onChange={selectSchool} />\n    </>\n  );\n}\n\nexport default Search;\n","import * as React from \"react\";\nimport Search from \"./Search\";\n\nfunction Header() {\n  return (\n    <header>\n      <nav>\n        <h1>This is the nav</h1>\n      </nav>\n      <Search />\n    </header>\n  );\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport Body from \"./lib/Body\";\nimport Header from \"./lib/Header\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <Router>\n        <Route path=\"*\">\n          <section>\n            <Header />\n            <Body />\n          </section>\n        </Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}