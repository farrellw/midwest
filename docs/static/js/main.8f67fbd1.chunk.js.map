{"version":3,"sources":["registerServiceWorker.ts","lib/Button.tsx","lib/Icon.tsx","lib/Card.tsx","lib/SchoolInformation.tsx","lib/SearchForCompare.tsx","utils/Url.tsx","lib/SchoolInformationSlider.tsx","models/Data.ts","models/GeneralExpenseConstants.ts","lib/Chart.tsx","lib/Table.tsx","lib/ViewOptions.tsx","lib/GeneralExpense.tsx","models/FakeSubCategory.ts","lib/CategoryExpense.tsx","lib/Body.tsx","lib/Search.tsx","lib/Header.tsx","App.tsx","Router.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Button","className","type","title","children","onClick","Icon","CardHeader","CardContent","Card","onClose","SchoolInformation","school","schools","id","name","principal","SearchForCompare","onSchoolSelected","options","map","value","label","onChange","option","undefined","isOption","toQueryString","ids","Array","from","values","join","SchoolInformationSlider","useState","showSearch","setShowSearch","history","useHistory","selectedIds","s","onSchoolClose","schoolId","schoolIds","filter","id_","length","queryString","Url","push","schoolsForComparison","allSchools","find","concat","averageSchoolFunction","expenses","administrativeSalaries","projectedEnrollment","instructionalSalaries","instructionalSupportSalaries","nonInstructionalSupportSalaries","temp","benefits","transportation","discretionary","total","rows","key","colors","HC_exporting","Highcharts","HC_noDataToDisplay","lang","thousandsSep","getValue","val","Math","floor","toString","replace","Chart","caption","series","chart","numberFormatter","number","text","xAxis","categories","n","yAxis","min","align","labels","overflow","plotOptions","bar","dataLabels","enabled","legend","verticalAlign","layout","x","y","borderWidth","backgroundColor","shadow","credits","tooltip","pointFormat","noData","style","fontWeight","fontSize","color","highcharts","library","add","faCircle","Table","headers","clickHandler","i","icon","row","selected","j","ViewOptions","toggle","compareWithAverage","onToggleChange","onCompareWithAverageChange","checked","GeneralExpense","categoryClickHandler","category","viewByOption","setViewByOption","setCompareWthAverage","avgOrTotal","tog","selectedSchools","selectedTypes","selectedAverages","averageExpenses","avgExp","includes","combinedSchoolsAndAverages","data","r","round","buildCaption","tableData","toFixed","subCategoryExpenseLabel","subCategoryTableData","reduce","agg","curr","Map","CategoryExpense","rowData","Body","selectedCategory","setSelectedCategory","event","currentTarget","Search","Header","schoolExpensesDictionary","schoolExpenses","forEach","App","URLSearchParams","useLocation","search","getAll","Router","path","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8/+BAWMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,6CAOvBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,mCC7BlDC,MA7Cf,YAMW,IAAD,IALRC,iBAKQ,MALI,GAKJ,MAJRC,YAIQ,MAJD,UAIC,EAHRC,EAGQ,EAHRA,MACAC,EAEQ,EAFRA,SACAC,EACQ,EADRA,QAEA,OAAQH,GACN,IAAK,QACH,OACE,4BACEA,KAAK,SACLD,UAAS,UAAKA,EAAL,UACTE,MAAOA,EACPE,QAASA,GAERD,GAIP,IAAK,UACH,OACE,4BACEF,KAAK,SACLD,UAAS,UAAKA,EAAL,YACTE,MAAOA,EACPE,QAASA,GAERD,GAGP,IAAK,UACH,OACE,4BACEF,KAAK,SACLD,UAAS,UAAKA,EAAL,YACTE,MAAOA,EACPE,QAASA,GAERD,K,MCrCIE,MATf,YACE,OAD6B,EAAfJ,MAEZ,IAAK,QACH,OAAO,0BAAMD,UAAU,eACzB,IAAK,MACH,OAAO,0BAAMA,UAAU,eCCtB,SAASM,EAAT,GAA0D,IAApCH,EAAmC,EAAnCA,SAAmC,IAAzBH,iBAAyB,MAAb,GAAa,EAC9D,OAAO,uBAAKA,UAAS,UAAKA,EAAL,YAA0BG,GAG1C,SAASI,EAAT,GAA2D,IAApCJ,EAAmC,EAAnCA,SAAmC,IAAzBH,iBAAyB,MAAb,GAAa,EAC/D,OAAO,uBAAKA,UAAS,UAAKA,EAAL,aAA2BG,GAI3C,SAASK,EAAT,GAAiE,IAAjDL,EAAgD,EAAhDA,SAAgD,IAAtCH,iBAAsC,MAA1B,GAA0B,EAAtBS,EAAsB,EAAtBA,QAC/C,OACE,uBAAKT,UAAS,UAAKA,EAAL,UACXS,GACC,gBAAC,EAAD,CAAQR,KAAK,QAAQC,MAAM,QAAQF,UAAU,QAAQI,QAASK,GAC5D,gBAAC,EAAD,CAAMR,KAAK,WAGdE,GCGQO,MApBf,YAAiE,IAApCD,EAAmC,EAAnCA,QAASE,EAA0B,EAA1BA,OACpC,OAD8D,EAAlBC,QAE1C,kBAAC,EAAD,CAAMZ,UAAU,qBAAqBS,QAAS,kBAAMA,EAAQE,EAAOE,MACjE,kBAACP,EAAD,CAAYN,UAAU,UACpB,4BAAKW,EAAOG,OAEd,kBAACP,EAAD,KACE,4BACE,wCACA,qCACA,yCACA,4BAAKI,EAAOI,WACZ,8CACA,6C,cCuBKC,MA1Bf,YAA0E,IAA9CP,EAA6C,EAA7CA,QAASG,EAAoC,EAApCA,QAASK,EAA2B,EAA3BA,iBAOtCC,EAAqBN,EAAQO,KAAI,SAACR,GAAD,MAAsB,CAC3DS,MAAOT,EAAOE,GACdQ,MAAOV,EAAOG,SAGhB,OACE,uBAAKd,UAAU,UACb,gBAAC,EAAD,CAAMS,QAASA,GACb,gBAACF,EAAD,KACE,2DAEE,gBAAC,IAAD,CAAQW,QAASA,EAASI,SAjBpC,SAAsBC,IAVxB,SAAkBA,GAChB,OAAO9C,QAAQ8C,SAAyCC,IAA7BD,EAAmBH,OAUxCK,CAASF,IACXN,EAAiBM,EAAOH,e,QCvBvB,SAASM,EAAcC,GAC5B,OAAOC,MAAMC,KAAKF,EAAIG,UACnBX,KAAI,SAAAN,GAAE,mBAAUA,MAChBkB,KAAK,K,YCwEKC,MA9Df,YAAsD,IAAnBpB,EAAkB,EAAlBA,QAAkB,EACfqB,oBAAS,GADM,mBAC5CC,EAD4C,KAChCC,EADgC,KAE7CC,EAAUC,cAEVC,EAAc1B,EAAQO,KAAI,SAAAoB,GAAC,OAAIA,EAAE1B,MAavC,SAAS2B,EAAcC,GACrB,IDjBqBd,EAAed,ECiB9B6B,GDjBef,ECkBnBf,EAAQO,KAAI,SAAAoB,GAAC,OAAIA,EAAE1B,MDlBeA,ECmBlC4B,EDlBGd,EAAIgB,QAAO,SAAAC,GAAG,OAAIA,IAAQ/B,MCoB3B6B,EAAUG,QAAU,GACtBV,GAAc,GAEhB,IAAMW,EAAcC,EAAkBL,GACtCN,EAAQY,KAAR,WAAiBF,IAGnB,IAAMG,EAAkCC,EAAWP,QAvBnD,SAA4BhC,GAC1B,OAAQ2B,EAAYa,MAAK,SAAAV,GAAQ,OAAIA,IAAa9B,EAAOE,SAwB3D,OACE,yBAAKb,UAAU,6BACZY,EAAQiC,OAAS,GAChB,kBAAC,EAAD,CACE5C,KAAK,UACLG,QAAS,WACP+B,GAAc,KAGhB,kBAAC,EAAD,CAAMlC,KAAK,QANb,yBAUDiC,GACC,kBAAC,EAAD,CACEtB,QAASqC,EACThC,iBArCR,SAA0BJ,GACxB,IACMiC,EAAcC,EDnBjB,SAAepB,EAAed,GACnC,OAAIc,EAAIwB,MAAK,SAAAP,GAAG,OAAIA,IAAQ/B,KACnBc,EAEA,CAACd,GAAIuC,OAAOzB,GCcQoB,CAAUT,EAAazB,IAElDuB,EAAQY,KAAR,WAAiBF,IACjBX,GAAc,IAkCR1B,QAAS,kBAAM0B,GAAc,MAGhCvB,EAAQO,KAAI,SAAAR,GAAM,OACjB,kBAAC,EAAD,CACEA,OAAQA,EACRC,QAASA,EACTH,QAAS+B,S,QCrBNa,EAAwB,SAAC1C,GAmBpC,OAlBoB,eACfA,EADe,CAElB2C,SAAU,CACRC,uBACE5C,EAAO2C,SAASC,uBAAyB5C,EAAO6C,oBAClDC,sBACE9C,EAAO2C,SAASG,sBAAwB9C,EAAO6C,oBACjDE,6BACE/C,EAAO2C,SAASI,6BAA+B/C,EAAO6C,oBACxDG,gCACEhD,EAAO2C,SAASK,gCAAkChD,EAAO6C,oBAC3DI,KAAMjD,EAAO2C,SAASM,KAAOjD,EAAO6C,oBACpCK,SAAUlD,EAAO2C,SAASO,SAAWlD,EAAO6C,oBAC5CM,eAAgBnD,EAAO2C,SAASQ,eAAiBnD,EAAO6C,oBACxDO,cAAepD,EAAO2C,SAASS,cAAgBpD,EAAO6C,oBACtDQ,MAAOrD,EAAO2C,SAASU,MAAQrD,EAAO6C,wB,0DC7D/BS,EAAqB,CAC9B,CAAE5C,MAAO,QAAS6C,IAAK,SACvB,CAAE7C,MAAO,0BAA2B6C,IAAK,0BACzC,CAAE7C,MAAO,yBAA0B6C,IAAK,yBACxC,CACI7C,MAAO,iCACP6C,IAAK,gCAET,CACI7C,MAAO,qCACP6C,IAAK,mCAET,CAAE7C,MAAO,OAAQ6C,IAAK,QACtB,CAAE7C,MAAO,WAAY6C,IAAK,YAC1B,CAAE7C,MAAO,iBAAkB6C,IAAK,kBAChC,CAAE7C,MAAO,gBAAiB6C,IAAK,kBAGtBC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WCZ/GC,IAAaC,GACbC,IAAmBD,GACnBA,aAAsB,CACpBE,KAAM,CACJC,aAAc,KAEhBL,OAAQA,IAWV,IAAMM,EAAW,SAACC,GAChB,OAAGA,EAAM,IACA,MAASC,KAAKC,MAAMF,EAAM,KAAQ,KAAKG,WAAWC,QAAQ,wBAAyB,KAEnF,KAAOJ,EAAIG,WAAWC,QAAQ,wBAAyB,MAuEnDC,MAnEf,YAAmD,IAAlCC,EAAiC,EAAjCA,QAASf,EAAwB,EAAxBA,KAAMgB,EAAkB,EAAlBA,OACxB/D,EAA8B,CAClCgE,MAAO,CACLjF,KAAM,MACNkF,gBAAiB,SAACC,GAChB,OAAOX,EAASW,KAGpBlF,MAAO,CACLmF,KAAML,EAAU,iBAElBM,MAAO,CACLC,WAAYtB,EAAK9C,KAAI,SAAAqE,GAAC,OAAIA,EAAEnE,UAE9BoE,MAAO,CACLC,IAAK,EACLxF,MAAO,CACLmF,KAAM,UACNM,MAAO,QAETC,OAAQ,CACNC,SAAU,YAGdC,YAAa,CACXC,IAAK,CACHC,WAAY,CACVC,SAAS,KAIfC,OAAQ,CACNP,MAAO,QACPQ,cAAe,MACfC,OAAQ,WACRC,EAAG,EACHC,EAAG,IACHC,YAAa,EACbC,gBACGnC,iBAA0B6B,QACzB7B,iBAA0B6B,OAAOM,iBACnC,UACFC,QAAQ,EACRR,SAAS,GAEXS,QAAS,CACPT,SAAS,GAEXU,QAAS,CACPC,YAAa,2BAEfrC,KAAM,CACJsC,OAAQ,wDAEV5B,SACA4B,OAAQ,CACNC,MAAO,CACLC,WAAY,OACZC,SAAU,OACVC,MAAO,aAKb,OAAO,gBAAC,IAAD,CAAiBC,WAAY7C,EAAYnD,QAASA,K,gCCnF3DiG,IAAQC,IAAIC,KAkDGC,MAvCf,YAAkE,IAAjDC,EAAgD,EAAhDA,QAAStD,EAAuC,EAAvCA,KAAMe,EAAiC,EAAjCA,QAASwC,EAAwB,EAAxBA,aACvC,OACE,uBAAKxH,UAAU,QACb,6BACE,+BAAUgF,EAAV,mBACA,6BACE,0BACGuC,EAAQpG,KAAI,SAACqE,EAAGiC,GACf,OAAS,IAANA,EACM,sBAAIvD,IAAKuD,GAAG,gBAAC,IAAD,CAAiBC,KAAK,SAAST,MAAO9C,EAAOsD,EAAI,KAAM,2BAAMjC,IAEzE,sBAAItB,IAAKuD,GAAG,2BAAMjC,SAKjC,6BACGvB,EAAK9C,KAAI,SAACwG,EAAgBF,GACzB,OACE,sBACEvD,IAAKuD,EACLrH,QAASoH,EACT3G,GAAI8G,EAAItG,MACRrB,UAAW2H,EAAIC,SAAW,WAAa,IAEvC,0BAAKD,EAAItG,OAERsG,EAAI7F,OAAOX,KAAI,SAACqE,EAAGqC,GAClB,OAAO,sBAAI3D,IAAK2D,GAAIrC,c,sBCLvBsC,MAtCf,YAKY,IAJVC,EAIS,EAJTA,OACAC,EAGS,EAHTA,mBACAC,EAES,EAFTA,eACAC,EACS,EADTA,2BAEA,OACE,uBAAKlI,UAAU,kBACb,6BACE,yBACEC,KAAK,QACLmB,MAAM,QACN+G,QAAoB,UAAXJ,EACTzG,SAAU2G,IALd,SASA,6BACE,yBACEhI,KAAK,QACLmB,MAAM,cACN+G,QAAoB,gBAAXJ,EACTzG,SAAU2G,IALd,eASA,6BACE,yBACEhI,KAAK,WACLkI,QAASH,EACT1G,SAAU4G,IAJd,6BChBNf,IAAQC,IAAIC,KAqJGe,MA3If,YAA8E,IAApDxH,EAAmD,EAAnDA,QAASyH,EAA0C,EAA1CA,qBAAsBC,EAAoB,EAApBA,SAAoB,EACnCrG,mBAAuB,SADY,mBACpEsG,EADoE,KACtDC,EADsD,OAExBvG,oBAAS,GAFe,mBAEpE+F,EAFoE,KAEhDS,EAFgD,KAgBrEC,EAAa,SAACC,GAClB,OAAO,SAAChI,GACN,MAAY,UAARgI,EACKtF,EAAsB1C,GAEtBA,IAKPiI,EAA6BhI,EAAQO,KAAI,SAAAR,GAAM,OACnD+H,EAAWH,EAAXG,CAAyB/H,MAGrBkI,EAAgBD,EAAgBzH,KAAI,SAAAoB,GAAC,OAAIA,EAAEtC,QAE3C6I,EAAmBC,EACtBpG,QAAO,SAAAqG,GACN,OAAOhB,GAAsBa,EAAcI,SAASD,EAAO/I,SAE5DkB,KAAI,SAAAR,GAAM,OAAI+H,EAAWH,EAAXG,CAAyB/H,MAEpCuI,EAA6BN,EAAgBxF,OAAO0F,GAEpDrE,EAAW,SAACC,GAChB,MAAO,KAAOA,EAAIG,WAAWC,QAAQ,wBAAyB,MAG1DyC,EAAU,CAAC,YAAYnE,OAC3B8F,EAA2B/H,KAAI,SAAAqE,GAAC,OAAIA,EAAE1E,SAIlCmE,EAA6BiE,EAA2B/H,KAAI,SAACoB,EAAGkF,GACpE,MAAO,CACLxH,KAAM,MACNa,KAAMyG,EAAQE,EAAI,GAClB0B,KAAMlF,EAAK9C,KAAI,SAAAiI,GACb,OAAOzE,KAAK0E,MAA0B,IAApB9G,EAAEe,SAAS8F,EAAElF,MAAc,OAE/C+C,MAAO9C,EAAOsD,OAYZzC,EARe,SAACuD,GACpB,MAAoB,UAAjBA,EACK,sBAEA,kCAIMe,CAAaf,GAEvBgB,EAAyBtF,EAAK9C,KAClC,SAACwG,GACC,OAAO,eACFA,EADL,CAEE7F,OAAQoH,EAA2B/H,KAAI,SAACqE,GACtC,OACSf,EADY,UAAjB8D,EACc/C,EAAElC,SAASqE,EAAIzD,KAAKW,WAEpBW,EAAElC,SAASqE,EAAIzD,KAAKsF,QAAQ,OAGhD5B,SAAUD,EAAItG,QAAUiH,OAK9B,OACE,+BACE,uBAAKtI,UAAU,SACb,uBAAKA,UAAU,YACb,iCACA,uBAAKA,UAAU,eACb,0BACGY,EAAQO,KAAI,SAACqE,EAAGqC,GACf,OACE,sBAAI3D,IAAK2D,GACP,gBAAC,IAAD,CAAiBH,KAAK,SAAST,MAAO9C,EAAO0D,KAC5CrC,EAAE1E,WAMb,uBAAKd,UAAU,iBACb,0BAEIiE,EAAK9C,KAAI,SAACqE,EAAGqC,GACX,OACE,sBAAI3D,IAAK2D,GACNrC,EAAEnE,aAQjB,uBAAKrB,UAAU,wBACb,gBAAC,EAAD,CACEkI,2BA3G6B,WACrCO,GAAsBT,IA2GdC,eApHuB,WAE7BO,EADmB,UAAjBD,EACc,cAEA,UAiHVR,OAAQQ,EACRP,mBAAoBA,IAEtB,gBAAC,EAAD,CAAO/D,KAAMA,EAAMgB,OAAQA,EAAQD,QAASA,MAGhD,uBAAKhF,UAAU,SACb,gBAAC,EAAD,CACEuH,QAASA,EACTC,aAAca,EACdrD,QAASA,EACTf,KAAMsF,OChKHE,EAA0B,CACnC,cACA,cACA,cACA,cACA,cACA,eAGSC,EAAqCD,EAAwBtI,KAAI,SAAAqE,GAC1E,MAAO,CACHnE,MAAOmE,EACPtB,IAAKsB,MAImDiE,EAAwBE,QAAO,SAACC,EAAKC,GAEjG,OADAD,EAAIC,GAAQ,EACLD,IACR,IAAIE,KCqDQC,MAvDf,YAAyD,IAA9BnJ,EAA6B,EAA7BA,QAAS0H,EAAoB,EAApBA,SAAoB,EACdrG,mBAAuB,SADT,mBAC/CsG,EAD+C,KACjCC,EADiC,OAEHvG,oBAAS,GAFN,mBAE/C+F,EAF+C,KAE3BS,EAF2B,KAgBhDlB,EAAU,CAAC,cAAcnE,OAAOxC,EAAQO,KAAI,SAAAqE,GAAC,OAAIA,EAAE1E,SACnDmD,EAAOyF,EACP1E,EAAO,UAAMsD,EAAN,cAAoBC,EAApB,MAEPtD,EAA8BrE,EAAQO,KAAI,SAACoB,EAAGkF,GAClD,MAAO,CACLxH,KAAM,MACNa,KAAMyG,EAAQE,EAAI,GAClB0B,KAAM,OAIJa,EAAuB/F,EAAK9C,KAAI,SAACwG,GACrC,OAAO,eACFA,EADL,CAEE7F,OAAQlB,EAAQO,KAAI,WAClB,MAAO,wCAKb,OACE,2BAASnB,UAAU,QACjB,gBAAC,EAAD,CACEkI,2BA5BiC,WACrCO,GAAsBT,IA4BlBC,eArC2B,WAE7BO,EADmB,UAAjBD,EACc,cAEA,UAkCdR,OAAQQ,EACRP,mBAAoBA,IAEtB,uBAAKhI,UAAU,oBACb,gBAAC,EAAD,CAAOuH,QAASA,EAASvC,QAASA,EAASf,KAAM+F,IACjD,uBAAKhK,UAAU,mBACb,gBAAC,EAAD,CAAOiF,OAAQA,EAAQhB,KAAMA,EAAMe,QAASA,QC/BvCiF,MA5Bf,YAAmC,IAAnBrJ,EAAkB,EAAlBA,QAAkB,EACgBqB,mBAAS,IADzB,mBACzBiI,EADyB,KACPC,EADO,KAShC,OACE,wBAAMnK,UAAU,QACd,gBAAC,EAAD,CAAyBY,QAASA,IACjCA,EAAQiC,OAAS,GAChB,gBAAC,EAAD,CACEjC,QAASA,EACTyH,qBAZmB,SACzB+B,GAEAD,EAAoBC,EAAMC,cAAcxJ,KAUlCyH,SAAU4B,IAGbA,GAAyC,KAArBA,GACnB,uBAAKlK,UAAU,iBACb,gBAAC,EAAD,CAAiBsI,SAAU4B,EAAkBtJ,QAASA,OCjB1DM,EAAqBN,EAAQO,KAAI,SAACR,GAAD,MAAsB,CAC3DS,MAAOT,EAAOE,GACdQ,MAAOV,EAAOG,SA8BDwJ,MAvBf,WACE,IAAMlI,EAAUC,cAQhB,OACE,uBAAKrC,UAAU,UACb,gBAAC,EAAD,KACE,gBAACO,EAAD,KACE,iDAEE,gBAAC,IAAD,CAAQW,QAASA,EAASI,SAZpC,SAAsBC,IAPxB,SAAkBA,GAChB,OAAO9C,QAAQ8C,SAAyCC,IAA7BD,EAAmBH,OAOxCK,CAASF,IACXa,EAAQY,KAAR,cAAoBzB,EAAOH,gB,MCTlBmJ,MAXf,YAAqC,IAAnB3J,EAAkB,EAAlBA,QAChB,OACE,gCACE,0BAAQZ,UAAU,UAChB,0CAEDY,EAAQiC,QAAU,GAAK,gBAAC,EAAD,Q,MCA9B,IAAM2H,EAA2B,GACjCC,EAAeC,SAAQ,SAAA/J,GACrB6J,EAAyB7J,EAAOE,IAAMF,KAkBzBgK,MAff,WACE,IAEM/B,EAXC,IAAIgC,gBAAgBC,cAAcC,QAULC,OAAO,MACI5J,KAC7C,SAAAN,GAAE,OAAI2J,EAAyB3J,MAGjC,OACE,gCACE,gBAAC,EAAD,CAAQD,QAASgI,IACjB,gBAAC,EAAD,CAAMhI,QAASgI,M,QCbNoC,MAVf,WACE,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,KAAK,KACV,gBAAC,EAAD,SCFRC,SAAgB,gBAAC,EAAD,MAAYC,SAASC,eAAe,SrBerC,WACb,GAA6C,kBAAmBpM,UAAW,CAMzE,GAJkB,IAAIqM,IACpBC,IACA5M,OAAOC,SAASkG,YAEJ0G,SAAW7M,OAAOC,SAAS4M,OAIvC,OAGF7M,OAAO8M,iBAAiB,QAAQ,WAC9B,IAAMzM,EAAK,UAAMuM,IAAN,sBAEP9M,IAmDV,SAAiCO,GAE/B0M,MAAM1M,GACHI,MAAK,SAAAuM,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASnE,QAAQqE,IAAI,gBAAiBC,QAAQ,cAG9C7M,UAAUC,cAAc6M,MAAM3M,MAAK,SAAAC,GACjCA,EAAa2M,aAAa5M,MAAK,WAC7BT,OAAOC,SAASqN,eAKpBlN,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAvEAqM,CAAwBlN,GAIxBC,UAAUC,cAAc6M,MAAM3M,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OqB7CxBmN,K","file":"static/js/main.8f67fbd1.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./Button.scss\";\n\ntype Type = \"image\" | \"primary\" | \"default\";\ntype Props = {\n  className?: string;\n  type?: Type;\n  title?: string;\n  children: JSX.Element | (JSX.Element | string)[] | string;\n  onClick?: () => void;\n};\nfunction Button({\n  className = \"\",\n  type = \"default\",\n  title,\n  children,\n  onClick\n}: Props) {\n  switch (type) {\n    case \"image\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} image`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n\n    case \"primary\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} primary`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n    case \"default\":\n      return (\n        <button\n          type=\"button\"\n          className={`${className} default`}\n          title={title}\n          onClick={onClick}\n        >\n          {children}\n        </button>\n      );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport \"./Icon.scss\";\n\ntype Props = { type: \"close\" | \"add\" };\nfunction Icon({ type }: Props) {\n  switch (type) {\n    case \"close\":\n      return <span className=\"icon close\"></span>;\n    case \"add\":\n      return <span className=\"icon add\"></span>;\n  }\n}\n\nexport default Icon;\n","import * as React from \"react\";\nimport \"./Card.scss\";\nimport Button from \"./Button\";\nimport Icon from \"./Icon\";\n\ntype Props = {\n  className?: string;\n  children: JSX.Element | JSX.Element[];\n};\n\nexport function CardHeader({ children, className = \"\" }: Props) {\n  return <div className={`${className} header`}>{children}</div>;\n}\n\nexport function CardContent({ children, className = \"\" }: Props) {\n  return <div className={`${className} content`}>{children}</div>;\n}\n\ntype CardProps = Props & { onClose?: () => void };\nexport function Card({ children, className = \"\", onClose }: CardProps) {\n  return (\n    <div className={`${className} card`}>\n      {onClose && (\n        <Button type=\"image\" title=\"Close\" className=\"close\" onClick={onClose}>\n          <Icon type=\"close\" />\n        </Button>\n      )}\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./SchoolInformation.scss\";\nimport { ISchool } from \"src/models/Data\";\nimport { Card, CardHeader, CardContent } from \"./Card\";\n\ntype Props = {\n  school: ISchool;\n  schools: ISchool[];\n  onClose: (id: string) => void;\n};\nfunction SchoolInformation({ onClose, school, schools }: Props) {\n  return (\n    <Card className=\"school-information\" onClose={() => onClose(school.id)}>\n      <CardHeader className=\"header\">\n        <h2>{school.name}</h2>\n      </CardHeader>\n      <CardContent>\n        <dl>\n          <dt>Zip Code</dt>\n          <dd>63108</dd>\n          <dt>Principal</dt>\n          <dd>{school.principal}</dd>\n          <dt>Vice Principal</dt>\n          <dd>Dr. Seuss</dd>\n        </dl>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default SchoolInformation;\n","import * as React from \"react\";\nimport Select, { ValueType } from \"react-select\";\nimport { ISchool } from \"src/models/Data.js\";\nimport { Card, CardContent } from \"./Card\";\nimport \"./Search.scss\";\n\ninterface IOption {\n  value: string;\n  label: string;\n}\n\nfunction isOption(option: ValueType<IOption>): option is IOption {\n  return Boolean(option) && (option as IOption).value !== undefined;\n}\n\ntype Props = {\n  schools: ISchool[];\n  onSchoolSelected: (id: string) => void;\n  onClose: () => void;\n};\nfunction SearchForCompare({ onClose, schools, onSchoolSelected }: Props) {\n  function selectSchool(option: ValueType<IOption>) {\n    if (isOption(option)) {\n      onSchoolSelected(option.value);\n    }\n  }\n\n  const options: IOption[] = schools.map((school: ISchool) => ({\n    value: school.id,\n    label: school.name\n  }));\n\n  return (\n    <div className=\"search\">\n      <Card onClose={onClose}>\n        <CardContent>\n          <label>\n            Find the school to compare:\n            <Select options={options} onChange={selectSchool} />\n          </label>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default SearchForCompare;\n","export function toQueryString(ids: string[]): string {\n  return Array.from(ids.values())\n    .map(id => `id=${id}`)\n    .join(\"&\");\n}\n\nexport function addId(ids: string[], id: string): string[] {\n  if (ids.find(id_ => id_ === id)) {\n    return ids;\n  } else {\n    return [id].concat(ids);\n  }\n}\n\nexport function removeId(ids: string[], id: string): string[] {\n  return ids.filter(id_ => id_ !== id);\n}\n","import React, { useState } from \"react\";\nimport \"./SchoolInformationSlider.scss\";\nimport SchoolInformation from \"./SchoolInformation\";\nimport { ISchool } from \"src/models/Data\";\nimport Button from \"./Button\";\nimport Icon from \"./Icon\";\nimport SearchForCompare from \"./SearchForCompare\";\nimport allSchools from \"../data/SchoolExpenses.json\";\nimport * as Url from \"../utils/Url\";\nimport { useHistory } from \"react-router-dom\";\n\ntype Props = { schools: ISchool[] };\n\nfunction SchoolInformationSlider({ schools }: Props) {\n  const [showSearch, setShowSearch] = useState(false);\n  const history = useHistory();\n\n  const selectedIds = schools.map(s => s.id);\n\n  function notAlreadySelected(school: any): boolean {\n    return !selectedIds.find(schoolId => schoolId === school.id);\n  }\n\n  function onSchoolSelected(id: string) {\n    const updatedSelectedIds = Url.addId(selectedIds, id);\n    const queryString = Url.toQueryString(updatedSelectedIds);\n    history.push(`?${queryString}`);\n    setShowSearch(false);\n  }\n\n  function onSchoolClose(schoolId: string) {\n    const schoolIds = Url.removeId(\n      schools.map(s => s.id),\n      schoolId\n    );\n    if (schoolIds.length <= 0) {\n      setShowSearch(false);\n    }\n    const queryString = Url.toQueryString(schoolIds);\n    history.push(`?${queryString}`);\n  }\n\n  const schoolsForComparison: ISchool[] = allSchools.filter(notAlreadySelected);\n\n  return (\n    <div className=\"school-information-slider\">\n      {schools.length > 0 && (\n        <Button\n          type=\"default\"\n          onClick={() => {\n            setShowSearch(true);\n          }}\n        >\n          <Icon type=\"add\"></Icon>\n          Add school to compare\n        </Button>\n      )}\n      {showSearch && (\n        <SearchForCompare\n          schools={schoolsForComparison}\n          onSchoolSelected={onSchoolSelected}\n          onClose={() => setShowSearch(false)}\n        />\n      )}\n      {schools.map(school => (\n        <SchoolInformation\n          school={school}\n          schools={schools}\n          onClose={onSchoolClose}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default SchoolInformationSlider;\n","export interface ISchool {\n  id: string;\n  name: string;\n  type: string;\n  address?: string;\n  principal?: string;\n  phone?: string;\n  projectedEnrollment: number;\n  expenses: IGeneralSchoolExpense;\n}\n\nexport interface IGeneralSchoolExpense {\n  total: number;\n  administrativeSalaries: number;\n  instructionalSalaries: number;\n  instructionalSupportSalaries: number;\n  nonInstructionalSupportSalaries: number;\n  temp: number;\n  benefits: number;\n  transportation: number;\n  discretionary: number;\n}\nexport type SubCategorySchoolExpense = Map<string, number>;\n\nexport type SchoolExpense = IGeneralSchoolExpense | SubCategorySchoolExpense;\n\nexport type SchoolType = \"H\" | \"M\" | \"E\" | \"A\";\n\nexport const SchoolTypeToTypeLabel = {\n  H: \"High\",\n  M: \"Middle\",\n  E: \"Elementary\",\n  A: \"Alternative\"\n};\n\nexport interface ITableData {\n  label: string;\n  key: string;\n}\n\nexport interface ITableRow {\n  label: string;\n  values: string[];\n  selected?: boolean;\n}\n\n\nexport const averageSchoolFunction = (school: ISchool) => {\n  const averagedSchool = {\n    ...school,\n    expenses: {\n      administrativeSalaries:\n        school.expenses.administrativeSalaries / school.projectedEnrollment,\n      instructionalSalaries:\n        school.expenses.instructionalSalaries / school.projectedEnrollment,\n      instructionalSupportSalaries:\n        school.expenses.instructionalSupportSalaries / school.projectedEnrollment,\n      nonInstructionalSupportSalaries:\n        school.expenses.nonInstructionalSupportSalaries / school.projectedEnrollment,\n      temp: school.expenses.temp / school.projectedEnrollment,\n      benefits: school.expenses.benefits / school.projectedEnrollment,\n      transportation: school.expenses.transportation / school.projectedEnrollment,\n      discretionary: school.expenses.discretionary / school.projectedEnrollment,\n      total: school.expenses.total / school.projectedEnrollment\n    },\n  };\n  return averagedSchool;\n}\n\nexport type ViewByOption = \"Total\" | \"Per Student\";","import { ITableData } from './Data';\n\nexport const rows: ITableData[] = [\n    { label: \"Total\", key: \"total\" },\n    { label: \"Administrative Salaries\", key: \"administrativeSalaries\" },\n    { label: \"Instructional Salaries\", key: \"instructionalSalaries\" },\n    {\n        label: \"Instructional Support Salaries\",\n        key: \"instructionalSupportSalaries\"\n    },\n    {\n        label: \"Non Instructional Support Salaries\",\n        key: \"nonInstructionalSupportSalaries\"\n    },\n    { label: \"Temp\", key: \"temp\" },\n    { label: \"Benefits\", key: \"benefits\" },\n    { label: \"Transportation\", key: \"transportation\" },\n    { label: \"Discretionary\", key: \"discretionary\" }\n];\n\nexport const colors = ['#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'];","import * as React from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport { ITableData } from \"../models/Data\";\nimport HC_exporting from \"highcharts/modules/exporting\";\nimport HC_noDataToDisplay from \"highcharts/modules/no-data-to-display\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { colors } from \"src/models/GeneralExpenseConstants\";\n\nHC_exporting(Highcharts);\nHC_noDataToDisplay(Highcharts);\nHighcharts.setOptions({\n  lang: {\n    thousandsSep: \",\"\n  },\n  colors: colors\n});\n\ninterface IProps {\n  caption: string;\n  rows: ITableData[];\n  series: Highcharts.SeriesOptionsType[];\n}\n\n\n\nconst getValue = (val: number): string => {\n  if(val > 1000) { \n    return \"$ \" +  (Math.floor(val / 1000) + \"k\").toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  } else {\n    return \"$ \" + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n};\n\nfunction Chart({ caption, rows, series }: IProps) {\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"bar\",\n      numberFormatter: (number) => {\n        return getValue(number);\n      }\n    },\n    title: {\n      text: caption + \" (Graph View)\"\n    },\n    xAxis: {\n      categories: rows.map(n => n.label)\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"Dollars\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true\n        }\n      }\n    },\n    legend: {\n      align: \"right\",\n      verticalAlign: \"top\",\n      layout: \"vertical\",\n      x: 0,\n      y: 100,\n      borderWidth: 1,\n      backgroundColor:\n        (Highcharts.defaultOptions.legend &&\n          Highcharts.defaultOptions.legend.backgroundColor) ||\n        \"#FFFFFF\",\n      shadow: true,\n      enabled: false\n    },\n    credits: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormat: \"Value: {point.y:,.2f} $\"\n    },\n    lang: {\n      noData: \"Chart Unavailable because data has not been released\"\n    },\n    series,\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n        color: \"#303030\"\n      }\n    }\n  };\n\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default Chart;\n","import * as React from \"react\";\nimport { ITableRow } from \"../models/Data\";\nimport \"./Table.scss\";\nimport { colors } from \"../models/GeneralExpenseConstants\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  library\n} from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCircle\n} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faCircle);\n\ninterface IProps {\n  headers: string[];\n  rows: ITableRow[];\n  caption: string;\n  clickHandler?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ) => void;\n}\n\nfunction Table({ headers, rows, caption, clickHandler }: IProps) {\n  return (\n    <div className=\"card\">\n      <table>\n        <caption>{caption} ( Table View )</caption>\n        <thead>\n          <tr>\n            {headers.map((n, i) => {\n              if(i !== 0){\n                return <th key={i}><FontAwesomeIcon icon=\"circle\" color={colors[i - 1]} /><div>{n}</div></th>;\n              } else {\n                return <th key={i}><div>{n}</div></th>;\n              }\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row: ITableRow, i: number) => {\n            return (\n              <tr\n                key={i}\n                onClick={clickHandler}\n                id={row.label}\n                className={row.selected ? \"selected\" : \"\"}\n              >\n                <td>{row.label}</td>\n\n                {row.values.map((n, j: number) => {\n                  return <td key={j}>{n}</td>;\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import * as React from \"react\";\nimport \"./ViewOptions.scss\";\n\ninterface IProps {\n  toggle: string;\n  compareWithAverage: boolean;\n  onToggleChange: () => void;\n  onCompareWithAverageChange: () => void;\n}\n\nfunction ViewOptions({\n  toggle,\n  compareWithAverage,\n  onToggleChange,\n  onCompareWithAverageChange\n}: IProps) {\n  return (\n    <div className=\"displayOptions\">\n      <label>\n        <input\n          type=\"radio\"\n          value=\"Total\"\n          checked={toggle === \"Total\"}\n          onChange={onToggleChange}\n        />\n        Total\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"Per Student\"\n          checked={toggle === \"Per Student\"}\n          onChange={onToggleChange}\n        />\n        Per Student\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={compareWithAverage}\n          onChange={onCompareWithAverageChange}\n        />\n        Compare against Average\n      </label>\n    </div>\n  );\n}\n\nexport default ViewOptions;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  ITableData,\n  ISchool,\n  ITableRow,\n  ViewByOption,\n  averageSchoolFunction\n} from \"../models/Data\";\nimport { SeriesBarOptions } from \"highcharts\";\nimport Chart from \"./Chart\";\nimport Table from \"./Table\";\nimport \"./GeneralExpense.scss\";\nimport averageExpenses from \"../data/SchoolAverages.json\";\nimport ViewOptions from \"./ViewOptions\";\nimport { rows, colors } from \"../models/GeneralExpenseConstants\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faCircle);\n\ninterface IProps {\n  schools: ISchool[];\n  categoryClickHandler: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ) => void;\n  category: string;\n}\n\nfunction GeneralExpense({ schools, categoryClickHandler, category }: IProps) {\n  const [viewByOption, setViewByOption] = useState<ViewByOption>(\"Total\");\n  const [compareWithAverage, setCompareWthAverage] = useState(false);\n\n  const handleViewByOptionChange = () => {\n    if (viewByOption === \"Total\") {\n      setViewByOption(\"Per Student\");\n    } else {\n      setViewByOption(\"Total\");\n    }\n  };\n\n  const handleCompareWithAverageChange = () => {\n    setCompareWthAverage(!compareWithAverage);\n  };\n\n  const avgOrTotal = (tog: string): ((school: ISchool) => ISchool) => {\n    return (school: ISchool) => {\n      if (tog !== \"Total\") {\n        return averageSchoolFunction(school);\n      } else {\n        return school;\n      }\n    };\n  };\n\n  const selectedSchools: ISchool[] = schools.map(school =>\n    avgOrTotal(viewByOption)(school)\n  );\n\n  const selectedTypes = selectedSchools.map(s => s.type);\n\n  const selectedAverages = averageExpenses\n    .filter(avgExp => {\n      return compareWithAverage && selectedTypes.includes(avgExp.type);\n    })\n    .map(school => avgOrTotal(viewByOption)(school));\n\n  const combinedSchoolsAndAverages = selectedSchools.concat(selectedAverages);\n\n  const getValue = (val: string): string => {\n    return \"$ \" + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const headers = [\"Category\"].concat(\n    combinedSchoolsAndAverages.map(n => n.name)\n  );\n\n  // Compute chart data to display\n  const series: SeriesBarOptions[] = combinedSchoolsAndAverages.map((s, i) => {\n    return {\n      type: \"bar\",\n      name: headers[i + 1],\n      data: rows.map(r => {\n        return Math.round(s.expenses[r.key] * 100) / 100;\n      }),\n      color: colors[i]\n    };\n  });\n\n  const buildCaption = (viewByOption: ViewByOption) => {\n    if(viewByOption === \"Total\"){\n      return `Total Dollars Spent`\n    } else {\n      return `Total Dollars Spent per Student`\n    }\n  }\n\n  const caption = buildCaption(viewByOption);\n  \n  const tableData: ITableRow[] = rows.map(\n    (row: ITableData): ITableRow => {\n      return {\n        ...row,\n        values: combinedSchoolsAndAverages.map((n): string => {\n          if (viewByOption === \"Total\") {\n            return getValue(n.expenses[row.key].toString());\n          } else {\n            return getValue(n.expenses[row.key].toFixed(2));\n          }\n        }),\n        selected: row.label === category\n      };\n    }\n  );\n\n  return (\n    <section>\n      <div className=\"panel\">\n        <div className=\"card key\">\n          <h3>Key</h3>\n          <div className=\"school-list\">\n            <ul>\n              {schools.map((n, j: number) => {\n                return (\n                  <li key={j}>\n                    <FontAwesomeIcon icon=\"circle\" color={colors[j]} />\n                    {n.name}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n          <div className=\"category-list\">\n            <ul>\n              {\n                rows.map((n, j: number) => {\n                  return (\n                    <li key={j}>\n                      {n.label}\n                    </li>\n                  )\n                })\n              }\n            </ul>\n          </div>\n        </div>\n        <div className=\"chart-container card\">\n          <ViewOptions\n            onCompareWithAverageChange={handleCompareWithAverageChange}\n            onToggleChange={handleViewByOptionChange}\n            toggle={viewByOption}\n            compareWithAverage={compareWithAverage}\n          />\n          <Chart rows={rows} series={series} caption={caption} />\n        </div>\n      </div>\n      <div className=\"panel\">\n        <Table\n          headers={headers}\n          clickHandler={categoryClickHandler}\n          caption={caption}\n          rows={tableData}\n        />\n      </div>\n    </section>\n  );\n}\n\nexport default GeneralExpense;\n","import { ITableData, SubCategorySchoolExpense } from \"./Data\";\n\nexport const subCategoryExpenseLabel = [\n    \"Line Item 1\",\n    \"Line Item 2\",\n    \"Line Item 3\",\n    \"Line Item 4\",\n    \"Line Item 5\",\n    \"Line Item 6\"\n];\n\nexport const subCategoryTableData: ITableData[] = subCategoryExpenseLabel.map(n => {\n    return {\n        label: n,\n        key: n\n    }\n})\n\nexport const subCategoryExpenseData: SubCategorySchoolExpense = subCategoryExpenseLabel.reduce((agg, curr) => {\n    agg[curr] = 0;\n    return agg;\n}, new Map<string, number>());","import * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  ITableData,\n  ISchool,\n  ITableRow,\n  ViewByOption\n} from \"../models/Data\";\nimport { SeriesOptionsType } from \"highcharts\";\nimport Table from \"./Table\";\nimport Chart from \"./Chart\";\nimport ViewOptions from \"./ViewOptions\";\nimport { subCategoryTableData } from \"../models/FakeSubCategory\";\n\ninterface IProps {\n  schools: ISchool[];\n  category: string;\n}\n\nfunction CategoryExpense({ schools, category }: IProps) {\n  const [viewByOption, setViewByOption] = useState<ViewByOption>(\"Total\");\n  const [compareWithAverage, setCompareWthAverage] = useState(false);\n\n  const handleViewByOptionChange = () => {\n    if (viewByOption === \"Total\") {\n      setViewByOption(\"Per Student\");\n    } else {\n      setViewByOption(\"Total\");\n    }\n  };\n\n  const handleCompareWithAverageChange = () => {\n    setCompareWthAverage(!compareWithAverage);\n  };\n\n  const headers = [\"Field Name\"].concat(schools.map(n => n.name));\n  const rows = subCategoryTableData;\n  const caption = `${category} ( ${viewByOption} )`;\n\n  const series: SeriesOptionsType[] = schools.map((s, i) => {\n    return {\n      type: \"bar\",\n      name: headers[i + 1],\n      data: []\n    };\n  });\n\n  const rowData: ITableRow[] = rows.map((row: ITableData) => {\n    return {\n      ...row,\n      values: schools.map((): string => {\n        return \"This Data Has Not Been Shared\";\n      })\n    };\n  });\n\n  return (\n    <section className=\"card\">\n      <ViewOptions\n        onCompareWithAverageChange={handleCompareWithAverageChange}\n        onToggleChange={handleViewByOptionChange}\n        toggle={viewByOption}\n        compareWithAverage={compareWithAverage}\n      />\n      <div className=\"expense-section \">\n        <Table headers={headers} caption={caption} rows={rowData} />\n        <div className=\"chart-container\">\n          <Chart series={series} rows={rows} caption={caption} />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default CategoryExpense;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { ISchool } from \"../models/Data\";\nimport SchoolInformationSlider from \"./SchoolInformationSlider\";\nimport GeneralExpense from \"./GeneralExpense\";\nimport CategoryExpense from \"./CategoryExpense\";\n\ntype Props = { schools: ISchool[] };\nfunction Body({ schools }: Props) {\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  const categoryClickEvent = (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ): void => {\n    setSelectedCategory(event.currentTarget.id);\n  };\n\n  return (\n    <main className=\"body\">\n      <SchoolInformationSlider schools={schools} />\n      {schools.length > 0 && (\n        <GeneralExpense\n          schools={schools}\n          categoryClickHandler={categoryClickEvent}\n          category={selectedCategory}\n        />\n      )}\n      {selectedCategory && selectedCategory !== \"\" && (\n        <div className=\"expense-panel\">\n          <CategoryExpense category={selectedCategory} schools={schools} />\n        </div>\n      )}\n    </main>\n  );\n}\n\nexport default Body;\n","import * as React from \"react\";\nimport Select, { ValueType } from \"react-select\";\nimport schools from \"../data/SchoolExpenses.json\";\nimport { ISchool } from \"src/models/Data.js\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, CardContent } from \"./Card\";\nimport \"./Search.scss\";\n\ninterface IOption {\n  value: string;\n  label: string;\n}\nconst options: IOption[] = schools.map((school: ISchool) => ({\n  value: school.id,\n  label: school.name\n}));\n\nfunction isOption(option: ValueType<IOption>): option is IOption {\n  return Boolean(option) && (option as IOption).value !== undefined;\n}\n\nfunction Search() {\n  const history = useHistory();\n\n  function selectSchool(option: ValueType<IOption>) {\n    if (isOption(option)) {\n      history.push(`?id=${option.value}`);\n    }\n  }\n\n  return (\n    <div className=\"search\">\n      <Card>\n        <CardContent>\n          <label>\n            Find your school:\n            <Select options={options} onChange={selectSchool} />\n          </label>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Search;\n","import * as React from \"react\";\nimport Search from \"./Search\";\nimport \"./Header.scss\";\nimport { ISchool } from \"src/models/Data\";\n\ntype Props = { schools: ISchool[] };\nfunction Header({ schools }: Props) {\n  return (\n    <>\n      <header className=\"header\">\n        <h1>SLPS Budget</h1>\n      </header>\n      {schools.length <= 0 && <Search />}\n    </>\n  );\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport Body from \"./lib/Body\";\nimport Header from \"./lib/Header\";\nimport \"./App.scss\";\nimport { useLocation } from \"react-router-dom\";\nimport schoolExpenses from \"./data/SchoolExpenses.json\";\nimport { ISchool } from \"./models/Data\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst schoolExpensesDictionary = {};\nschoolExpenses.forEach(school => {\n  schoolExpensesDictionary[school.id] = school;\n});\n\nfunction App() {\n  const query = useQuery();\n  const selectedIds: string[] = query.getAll(\"id\");\n  const selectedSchools: ISchool[] = selectedIds.map(\n    id => schoolExpensesDictionary[id]\n  );\n\n  return (\n    <>\n      <Header schools={selectedSchools} />\n      <Body schools={selectedSchools} />\n    </>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport App from \"./App\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Route path=\"*\">\n        <App />\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport Router from \"./Router\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}