{"version":3,"sources":["models/Data.ts","models/GeneralExpenseConstants.ts","lib/Chart.tsx","lib/Table.tsx","lib/GeneralExpense.tsx","lib/CategoryExpense.tsx","models/FakeSubCategory.ts","lib/Body.tsx","lib/Search.tsx","lib/Header.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["averageSchoolFunction","school","administrativeSalaries","projectedEnrollment","instructionalSalaries","instructionalSupportSalaries","nonInstructionalSupportSalaries","temp","benefits","transportation","discretionary","rows","label","key","HC_exporting","Highcharts","HC_noDataToDisplay","lang","thousandsSep","Chart","caption","series","options","chart","type","title","text","xAxis","categories","map","n","yAxis","min","align","labels","overflow","plotOptions","bar","dataLabels","enabled","legend","layout","verticalAlign","x","y","floating","borderWidth","backgroundColor","shadow","credits","tooltip","pointFormat","noData","style","fontWeight","fontSize","color","highcharts","Table","headers","clickHandler","i","row","onClick","id","className","selected","values","j","Expense","selectedSchools","toggle","category","getValue","val","toString","replace","s","name","data","r","Math","round","tableData","concat","toFixed","CategoryExpense","rowData","subCategoryExpenseLabel","subCategoryTableData","subCategoryExpenseData","reduce","agg","curr","Map","Body","useState","setToggle","compareWithAverage","setCompareWthAverage","selectedCategory","setSelectedCategory","selectedIds","URLSearchParams","useLocation","search","getAll","schoolExpenses","filter","includes","selectedTypes","averageExpenses","avgExp","forEach","selectedAverage","push","onChange","checked","uncheckedIcon","checkedIcon","offColor","onColor","GeneralExpense","event","currentTarget","schools","value","Search","history","useHistory","option","Boolean","undefined","isOption","isMultipleOptions","queryString","o","join","isMulti","Header","App","path","React","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5ec3d987.chunk.js","sourcesContent":["export interface IGeneralSchoolExpense {\n  id: string;\n  name: string;\n  type: string;\n  projectedEnrollment: number;\n  administrativeSalaries: number;\n  instructionalSalaries: number;\n  instructionalSupportSalaries: number;\n  nonInstructionalSupportSalaries: number;\n  temp: number;\n  benefits: number;\n  transportation: number;\n  discretionary: number;\n}\n\nexport type SubCategorySchoolExpense = Map<string, number>;\n\nexport type SchoolExpense = IGeneralSchoolExpense | SubCategorySchoolExpense;\n\nexport type SchoolType = \"H\" | \"M\" | \"E\" | \"A\";\n\nexport const SchoolTypeToTypeLabel = {\n  H: \"High\",\n  M: \"Middle\",\n  E: \"Elementary\",\n  A: \"Alternative\"\n};\n\nexport interface ITableData {\n  label: string;\n  key: string;\n}\n\nexport interface ITableRow {\n  label: string;\n  values: string[];\n  selected?: boolean;\n}\n\n\nexport const averageSchoolFunction = (school: IGeneralSchoolExpense) => {\n  const averagedSchool = {\n    ...school,\n    administrativeSalaries:\n      school.administrativeSalaries / school.projectedEnrollment,\n    instructionalSalaries:\n      school.instructionalSalaries / school.projectedEnrollment,\n    instructionalSupportSalaries:\n      school.instructionalSupportSalaries / school.projectedEnrollment,\n    nonInstructionalSupportSalaries:\n      school.nonInstructionalSupportSalaries / school.projectedEnrollment,\n    temp: school.temp / school.projectedEnrollment,\n    benefits: school.benefits / school.projectedEnrollment,\n    transportation: school.transportation / school.projectedEnrollment,\n    discretionary: school.discretionary / school.projectedEnrollment\n  };\n  return averagedSchool;\n}\n\nexport type TotalOrPerStudent = \"Total\" | \"Per Student\";","import { ITableData } from './Data';\n\nexport const rows: ITableData[] = [\n    { label: \"Administrative Salaries\", key: \"administrativeSalaries\" },\n    { label: \"Instructional Salaries\", key: \"instructionalSalaries\" },\n    {\n        label: \"Instructional Support Salaries\",\n        key: \"instructionalSupportSalaries\"\n    },\n    {\n        label: \"Non Instructional Support Salaries\",\n        key: \"nonInstructionalSupportSalaries\"\n    },\n    { label: \"Temp\", key: \"temp\" },\n    { label: \"Benefits\", key: \"benefits\" },\n    { label: \"Transportation\", key: \"transportation\" },\n    { label: \"Discretionary\", key: \"discretionary\" }\n];\n","import * as React from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport { ITableData } from \"../models/Data\";\nimport HC_exporting from \"highcharts/modules/exporting\";\nimport HC_noDataToDisplay from \"highcharts/modules/no-data-to-display\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nHC_exporting(Highcharts);\nHC_noDataToDisplay(Highcharts);\nHighcharts.setOptions({\n  lang: {\n    thousandsSep: \",\"\n  }\n});\n\ninterface IProps {\n  caption: string;\n  rows: ITableData[];\n  series: Highcharts.SeriesOptionsType[];\n}\n\nfunction Chart({ caption, rows, series }: IProps) {\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"bar\"\n    },\n    title: {\n      text: caption\n    },\n    xAxis: {\n      categories: rows.map(n => n.label)\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"Dollars\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true\n        }\n      }\n    },\n    legend: {\n      layout: \"vertical\",\n      align: \"right\",\n      verticalAlign: \"top\",\n      x: -40,\n      y: 120,\n      floating: true,\n      borderWidth: 1,\n      backgroundColor:\n        (Highcharts.defaultOptions.legend &&\n          Highcharts.defaultOptions.legend.backgroundColor) ||\n        \"#FFFFFF\",\n      shadow: true\n    },\n    credits: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormat: \"Value: {point.y:,.2f} $\"\n    },\n    lang: {\n      noData: \"Chart Unavailable because data has not been released\"\n    },\n    series,\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n        color: \"#303030\"\n      }\n    }\n  };\n\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n}\n\nexport default Chart;\n","import * as React from \"react\";\nimport { ITableRow } from \"../models/Data\";\n\ninterface IProps {\n  headers: string[];\n  rows: ITableRow[];\n  caption: string;\n  clickHandler?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ) => void;\n}\n\nfunction Table({ headers, rows, caption, clickHandler }: IProps) {\n  return (\n    <table>\n      <caption>{caption}</caption>\n      <thead>\n        <tr>\n          {headers.map((n, i) => {\n            return <th key={i}>{n}</th>;\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((row: ITableRow, i: number) => {\n          return (\n            <tr\n              key={i}\n              onClick={clickHandler}\n              id={row.label}\n              className={row.selected ? \"selected\" : \"\"}\n            >\n              <td>{row.label}</td>\n\n              {row.values.map((n, j: number) => {\n                return <td key={j}>{n}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import * as React from \"react\";\nimport { ITableData, IGeneralSchoolExpense, ITableRow } from \"../models/Data\";\nimport * as Highcharts from \"highcharts\";\nimport Chart from \"./Chart\";\nimport Table from \"./Table\";\n\ninterface IProps {\n    selectedSchools: IGeneralSchoolExpense[];\n    headers: string[];\n    rows: ITableData[];\n    caption: string;\n    toggle: string;\n    clickHandler?: (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n    category: string;\n}\n\nfunction Expense({ selectedSchools, headers, rows, caption, clickHandler, toggle, category }: IProps) {\n    const getValue = (val: string): string => {\n        return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    };\n    const series: Highcharts.SeriesOptionsType[] = selectedSchools.map((s, i) => {\n        return {\n            type: \"bar\",\n            name: headers[i + 1],\n            data: rows.map(r => {\n                return Math.round(s[r.key] * 100) / 100;\n            }\n            )\n        }\n    })\n\n    // Compute table data to display\n    const enrollmentRow: ITableRow = {\n        label: \"Enrollment\",\n        values: selectedSchools.map(n => (n.projectedEnrollment).toString())\n    }\n    const tableData: ITableRow[] = [enrollmentRow].concat(rows.map((row: ITableData, i: number): ITableRow => {\n        return {\n            ...row,\n            values: selectedSchools.map((n, j: number): string => {\n                if (toggle === \"Total\") {\n                    return getValue(n[row.key].toString())\n                } else {\n                    return getValue(n[row.key].toFixed(2))\n                }\n            }),\n            selected: row.label === category\n        }\n    }))\n\n    return (\n        <section className=\"expense-section\">\n            <Table headers={headers} clickHandler={clickHandler} caption={caption} rows={tableData} />\n            <Chart rows={rows} series={series} caption={caption} />\n        </section>\n    );\n}\n\nexport default Expense;","import * as React from \"react\";\nimport { ITableData, SchoolExpense, ITableRow } from \"../models/Data\";\nimport * as Highcharts from \"highcharts\";\nimport Table from './Table';\nimport Chart from \"./Chart\";\n\ninterface IProps {\n    selectedSchools: SchoolExpense[];\n    headers: string[];\n    rows: ITableData[];\n    caption: string;\n    clickHandler?: (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n}\n\nfunction CategoryExpense({ selectedSchools, headers, rows, caption, clickHandler }: IProps) {\n    const series: Highcharts.SeriesOptionsType[] = selectedSchools.map((s, i) => {\n        return {\n            type: \"bar\",\n            name: headers[i + 1],\n            data: []\n        }\n    })\n\n    const rowData: ITableRow[] = rows.map((row: ITableData) => {\n        return {\n            ...row,\n            values: selectedSchools.map((): string => {\n                return \"This Data Has Not Been Shared\";\n            })\n        }\n    })\n\n    return (\n        <section className=\"expense-section\">\n            <Table headers={headers} caption={caption} clickHandler={clickHandler} rows={rowData} />\n            <Chart series={series} rows={rows} caption={caption} />\n        </section>\n    );\n}\n\nexport default CategoryExpense;\n","import { ITableData, SubCategorySchoolExpense } from \"./Data\";\n\nexport const subCategoryExpenseLabel = [\n    \"Line Item 1\",\n    \"Line Item 2\",\n    \"Line Item 3\",\n    \"Line Item 4\",\n    \"Line Item 5\",\n    \"Line Item 6\"\n];\n\nexport const subCategoryTableData: ITableData[] = subCategoryExpenseLabel.map(n => {\n    return {\n        label: n,\n        key: n\n    }\n})\n\nexport const subCategoryExpenseData: SubCategorySchoolExpense = subCategoryExpenseLabel.reduce((agg, curr) => {\n    agg[curr] = 0;\n    return agg;\n}, new Map<string, number>());","import * as React from \"react\";\nimport { useState } from \"react\";\nimport schoolExpenses from \"../data/SchoolExpenses.json\";\nimport averageExpenses from \"../data/SchoolAverages.json\";\nimport {\n  IGeneralSchoolExpense,\n  averageSchoolFunction,\n  TotalOrPerStudent\n} from \"../models/Data\";\nimport { rows } from \"../models/GeneralExpenseConstants\";\nimport GeneralExpense from \"./GeneralExpense\";\nimport CategoryExpense from \"./CategoryExpense\";\nimport {\n  subCategoryExpenseData,\n  subCategoryTableData\n} from \"../models/FakeSubCategory\";\nimport Switch from \"react-switch\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nfunction Body() {\n  const [toggle, setToggle] = useState<TotalOrPerStudent>(\"Total\");\n  const [compareWithAverage, setCompareWthAverage] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const query = useQuery();\n\n  const selectedIds: string[] = query.getAll(\"id\");\n\n  const selectedSchools: IGeneralSchoolExpense[] = schoolExpenses\n    .filter(school => {\n      return selectedIds.includes(school.id);\n    })\n    .map(school => {\n      if (toggle !== \"Total\") {\n        const averagedSchool = averageSchoolFunction(school);\n        return averagedSchool;\n      } else {\n        return school;\n      }\n    });\n\n  if (compareWithAverage) {\n    const selectedTypes = selectedSchools.map(s => s.type);\n    const selectedAverages = averageExpenses.filter(avgExp => {\n      return selectedTypes.includes(avgExp.type);\n    });\n    selectedAverages.forEach(selectedAverage => {\n      if (toggle !== \"Total\") {\n        selectedSchools.push(averageSchoolFunction(selectedAverage));\n      } else {\n        selectedSchools.push(selectedAverage);\n      }\n    });\n  }\n\n  const handleChange = () => {\n    if (toggle === \"Total\") {\n      setToggle(\"Per Student\");\n    } else {\n      setToggle(\"Total\");\n    }\n  };\n\n  const handleCompareWithAverageChange = () => {\n    setCompareWthAverage(!compareWithAverage);\n  };\n\n  const clickEvent = (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>\n  ): void => {\n    setSelectedCategory(event.currentTarget.id);\n  };\n\n  return (\n    <section className=\"body\">\n      <div className=\"displayOptions\">\n        <label>\n          <span>Total</span>\n          <Switch\n            onChange={handleChange}\n            checked={toggle === \"Per Student\"}\n            uncheckedIcon={false}\n            checkedIcon={false}\n            offColor={\"#34baeb\"}\n            onColor={\"#a2eb34\"}\n          />\n          <span>Per Student</span>\n        </label>\n        <label>\n          <Switch\n            onChange={handleCompareWithAverageChange}\n            checked={compareWithAverage}\n          />\n          <span>Compare Against Average</span>\n        </label>\n      </div>\n      <GeneralExpense\n        selectedSchools={selectedSchools}\n        headers={[\"Field Name\"].concat(selectedSchools.map(n => n.name))}\n        rows={rows}\n        caption={`General Expenses ( ${toggle} )`}\n        clickHandler={clickEvent}\n        toggle={toggle}\n        category={selectedCategory}\n      />\n      {selectedCategory && selectedCategory !== \"\" && (\n        <CategoryExpense\n          selectedSchools={selectedIds.map(n => subCategoryExpenseData)}\n          headers={[\"Field Name\"].concat(selectedSchools.map(n => n.name))}\n          rows={subCategoryTableData}\n          caption={`${selectedCategory} ( ${toggle} )`}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default Body;\n","import * as React from \"react\";\nimport Select, { ValueType } from \"react-select\";\nimport schools from \"../data/SchoolExpenses.json\";\nimport { IGeneralSchoolExpense } from \"src/models/Data.js\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface IOption {\n  value: string;\n  label: string;\n}\nconst options: IOption[] = schools.map((school: IGeneralSchoolExpense) => ({\n  value: school.id,\n  label: school.name\n}));\n\nfunction isOption(option: ValueType<IOption>): option is IOption {\n  return Boolean(option) && (option as IOption).value !== undefined;\n}\n\nfunction isMultipleOptions(option: ValueType<IOption>): option is IOption[] {\n  return Boolean(option) && (option as IOption[]) !== undefined;\n}\n\nfunction Search() {\n  const history = useHistory();\n\n  function selectSchool(option: ValueType<IOption>) {\n    if (isOption(option)) {\n      history.push(`?id=${option.value}`);\n    } else if (isMultipleOptions(option)) {\n      const queryString = option.map(o => `id=${o.value}`).join(\"&\");\n      history.push(`?${queryString}`);\n    } else {\n      history.push(\"\");\n    }\n  }\n\n  return (\n    <>\n      <Select options={options} onChange={selectSchool} isMulti={true} />\n    </>\n  );\n}\n\nexport default Search;\n","import * as React from \"react\";\nimport Search from \"./Search\";\nimport \"./Header.scss\";\n\nfunction Header() {\n  return (\n    <header className=\"sb-header\">\n      <h1 className=\"sb-heading1\">School Budget</h1>\n      <nav></nav>\n      <Search />\n    </header>\n  );\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport Body from \"./lib/Body\";\nimport Header from \"./lib/Header\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <Router>\n        <Route path=\"*\">\n          <section>\n            <Header />\n            <Body />\n          </section>\n        </Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}